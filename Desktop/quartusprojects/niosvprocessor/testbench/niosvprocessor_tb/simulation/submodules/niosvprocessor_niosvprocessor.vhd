-- niosvprocessor_niosvprocessor.vhd

-- This file was auto-generated from intel_niosv_g_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 23.1 991

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity niosvprocessor_niosvprocessor is
	port (
		clk                          : in  std_logic                     := '0';             --                 clk.clk
		reset_reset                  : in  std_logic                     := '0';             --               reset.reset
		platform_irq_rx_irq          : in  std_logic_vector(15 downto 0) := (others => '0'); --     platform_irq_rx.irq
		instruction_manager_awaddr   : out std_logic_vector(31 downto 0);                    -- instruction_manager.awaddr
		instruction_manager_awsize   : out std_logic_vector(2 downto 0);                     --                    .awsize
		instruction_manager_awlen    : out std_logic_vector(7 downto 0);                     --                    .awlen
		instruction_manager_awprot   : out std_logic_vector(2 downto 0);                     --                    .awprot
		instruction_manager_awvalid  : out std_logic;                                        --                    .awvalid
		instruction_manager_awburst  : out std_logic_vector(1 downto 0);                     --                    .awburst
		instruction_manager_awready  : in  std_logic                     := '0';             --                    .awready
		instruction_manager_wdata    : out std_logic_vector(31 downto 0);                    --                    .wdata
		instruction_manager_wstrb    : out std_logic_vector(3 downto 0);                     --                    .wstrb
		instruction_manager_wlast    : out std_logic;                                        --                    .wlast
		instruction_manager_wvalid   : out std_logic;                                        --                    .wvalid
		instruction_manager_wready   : in  std_logic                     := '0';             --                    .wready
		instruction_manager_bresp    : in  std_logic_vector(1 downto 0)  := (others => '0'); --                    .bresp
		instruction_manager_bvalid   : in  std_logic                     := '0';             --                    .bvalid
		instruction_manager_bready   : out std_logic;                                        --                    .bready
		instruction_manager_araddr   : out std_logic_vector(31 downto 0);                    --                    .araddr
		instruction_manager_arsize   : out std_logic_vector(2 downto 0);                     --                    .arsize
		instruction_manager_arlen    : out std_logic_vector(7 downto 0);                     --                    .arlen
		instruction_manager_arprot   : out std_logic_vector(2 downto 0);                     --                    .arprot
		instruction_manager_arvalid  : out std_logic;                                        --                    .arvalid
		instruction_manager_arburst  : out std_logic_vector(1 downto 0);                     --                    .arburst
		instruction_manager_arready  : in  std_logic                     := '0';             --                    .arready
		instruction_manager_rdata    : in  std_logic_vector(31 downto 0) := (others => '0'); --                    .rdata
		instruction_manager_rresp    : in  std_logic_vector(1 downto 0)  := (others => '0'); --                    .rresp
		instruction_manager_rvalid   : in  std_logic                     := '0';             --                    .rvalid
		instruction_manager_rready   : out std_logic;                                        --                    .rready
		instruction_manager_rlast    : in  std_logic                     := '0';             --                    .rlast
		data_manager_awaddr          : out std_logic_vector(31 downto 0);                    --        data_manager.awaddr
		data_manager_awsize          : out std_logic_vector(2 downto 0);                     --                    .awsize
		data_manager_awlen           : out std_logic_vector(7 downto 0);                     --                    .awlen
		data_manager_awprot          : out std_logic_vector(2 downto 0);                     --                    .awprot
		data_manager_awvalid         : out std_logic;                                        --                    .awvalid
		data_manager_awready         : in  std_logic                     := '0';             --                    .awready
		data_manager_wdata           : out std_logic_vector(31 downto 0);                    --                    .wdata
		data_manager_wstrb           : out std_logic_vector(3 downto 0);                     --                    .wstrb
		data_manager_wlast           : out std_logic;                                        --                    .wlast
		data_manager_wvalid          : out std_logic;                                        --                    .wvalid
		data_manager_wready          : in  std_logic                     := '0';             --                    .wready
		data_manager_bresp           : in  std_logic_vector(1 downto 0)  := (others => '0'); --                    .bresp
		data_manager_bvalid          : in  std_logic                     := '0';             --                    .bvalid
		data_manager_bready          : out std_logic;                                        --                    .bready
		data_manager_araddr          : out std_logic_vector(31 downto 0);                    --                    .araddr
		data_manager_arsize          : out std_logic_vector(2 downto 0);                     --                    .arsize
		data_manager_arlen           : out std_logic_vector(7 downto 0);                     --                    .arlen
		data_manager_arprot          : out std_logic_vector(2 downto 0);                     --                    .arprot
		data_manager_arvalid         : out std_logic;                                        --                    .arvalid
		data_manager_arready         : in  std_logic                     := '0';             --                    .arready
		data_manager_rdata           : in  std_logic_vector(31 downto 0) := (others => '0'); --                    .rdata
		data_manager_rresp           : in  std_logic_vector(1 downto 0)  := (others => '0'); --                    .rresp
		data_manager_rvalid          : in  std_logic                     := '0';             --                    .rvalid
		data_manager_rlast           : in  std_logic                     := '0';             --                    .rlast
		data_manager_rready          : out std_logic;                                        --                    .rready
		ndm_reset_in_reset           : in  std_logic                     := '0';             --        ndm_reset_in.reset
		timer_sw_agent_write         : in  std_logic                     := '0';             --      timer_sw_agent.write
		timer_sw_agent_writedata     : in  std_logic_vector(31 downto 0) := (others => '0'); --                    .writedata
		timer_sw_agent_byteenable    : in  std_logic_vector(3 downto 0)  := (others => '0'); --                    .byteenable
		timer_sw_agent_address       : in  std_logic_vector(5 downto 0)  := (others => '0'); --                    .address
		timer_sw_agent_read          : in  std_logic                     := '0';             --                    .read
		timer_sw_agent_readdata      : out std_logic_vector(31 downto 0);                    --                    .readdata
		timer_sw_agent_readdatavalid : out std_logic;                                        --                    .readdatavalid
		timer_sw_agent_waitrequest   : out std_logic;                                        --                    .waitrequest
		dm_agent_write               : in  std_logic                     := '0';             --            dm_agent.write
		dm_agent_writedata           : in  std_logic_vector(31 downto 0) := (others => '0'); --                    .writedata
		dm_agent_address             : in  std_logic_vector(15 downto 0) := (others => '0'); --                    .address
		dm_agent_read                : in  std_logic                     := '0';             --                    .read
		dm_agent_readdata            : out std_logic_vector(31 downto 0);                    --                    .readdata
		dm_agent_readdatavalid       : out std_logic;                                        --                    .readdatavalid
		dm_agent_waitrequest         : out std_logic;                                        --                    .waitrequest
		dbg_reset_out_reset          : out std_logic                                         --       dbg_reset_out.reset
	);
end entity niosvprocessor_niosvprocessor;

architecture rtl of niosvprocessor_niosvprocessor is
	component niosvprocessor_niosvprocessor_hart is
		port (
			clk             : in  std_logic                     := 'X';             -- clk
			reset           : in  std_logic                     := 'X';             -- reset
			core_ecc_status : out std_logic_vector(1 downto 0);                     -- ecc_status
			core_ecc_src    : out std_logic_vector(3 downto 0);                     -- ecc_source
			irq_plat_vec    : in  std_logic_vector(15 downto 0) := (others => 'X'); -- irq
			irq_debug       : in  std_logic                     := 'X';             -- irq
			irq_timer       : in  std_logic                     := 'X';             -- irq
			irq_sw          : in  std_logic                     := 'X';             -- irq
			instr_awaddr    : out std_logic_vector(31 downto 0);                    -- awaddr
			instr_awsize    : out std_logic_vector(2 downto 0);                     -- awsize
			instr_awlen     : out std_logic_vector(7 downto 0);                     -- awlen
			instr_awprot    : out std_logic_vector(2 downto 0);                     -- awprot
			instr_awvalid   : out std_logic;                                        -- awvalid
			instr_awburst   : out std_logic_vector(1 downto 0);                     -- awburst
			instr_awready   : in  std_logic                     := 'X';             -- awready
			instr_wdata     : out std_logic_vector(31 downto 0);                    -- wdata
			instr_wstrb     : out std_logic_vector(3 downto 0);                     -- wstrb
			instr_wlast     : out std_logic;                                        -- wlast
			instr_wvalid    : out std_logic;                                        -- wvalid
			instr_wready    : in  std_logic                     := 'X';             -- wready
			instr_bresp     : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- bresp
			instr_bvalid    : in  std_logic                     := 'X';             -- bvalid
			instr_bready    : out std_logic;                                        -- bready
			instr_araddr    : out std_logic_vector(31 downto 0);                    -- araddr
			instr_arsize    : out std_logic_vector(2 downto 0);                     -- arsize
			instr_arlen     : out std_logic_vector(7 downto 0);                     -- arlen
			instr_arprot    : out std_logic_vector(2 downto 0);                     -- arprot
			instr_arvalid   : out std_logic;                                        -- arvalid
			instr_arburst   : out std_logic_vector(1 downto 0);                     -- arburst
			instr_arready   : in  std_logic                     := 'X';             -- arready
			instr_rdata     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- rdata
			instr_rresp     : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- rresp
			instr_rvalid    : in  std_logic                     := 'X';             -- rvalid
			instr_rready    : out std_logic;                                        -- rready
			instr_rlast     : in  std_logic                     := 'X';             -- rlast
			data_awaddr     : out std_logic_vector(31 downto 0);                    -- awaddr
			data_awsize     : out std_logic_vector(2 downto 0);                     -- awsize
			data_awlen      : out std_logic_vector(7 downto 0);                     -- awlen
			data_awprot     : out std_logic_vector(2 downto 0);                     -- awprot
			data_awvalid    : out std_logic;                                        -- awvalid
			data_awready    : in  std_logic                     := 'X';             -- awready
			data_wdata      : out std_logic_vector(31 downto 0);                    -- wdata
			data_wstrb      : out std_logic_vector(3 downto 0);                     -- wstrb
			data_wlast      : out std_logic;                                        -- wlast
			data_wvalid     : out std_logic;                                        -- wvalid
			data_wready     : in  std_logic                     := 'X';             -- wready
			data_bresp      : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- bresp
			data_bvalid     : in  std_logic                     := 'X';             -- bvalid
			data_bready     : out std_logic;                                        -- bready
			data_araddr     : out std_logic_vector(31 downto 0);                    -- araddr
			data_arsize     : out std_logic_vector(2 downto 0);                     -- arsize
			data_arlen      : out std_logic_vector(7 downto 0);                     -- arlen
			data_arprot     : out std_logic_vector(2 downto 0);                     -- arprot
			data_arvalid    : out std_logic;                                        -- arvalid
			data_arready    : in  std_logic                     := 'X';             -- arready
			data_rdata      : in  std_logic_vector(31 downto 0) := (others => 'X'); -- rdata
			data_rresp      : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- rresp
			data_rvalid     : in  std_logic                     := 'X';             -- rvalid
			data_rlast      : in  std_logic                     := 'X';             -- rlast
			data_rready     : out std_logic                                         -- rready
		);
	end component niosvprocessor_niosvprocessor_hart;

	component niosvprocessor_niosvprocessor_timer_module is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			hart_write         : in  std_logic                     := 'X';             -- write
			hart_writedata     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			hart_byteen        : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			hart_address       : in  std_logic_vector(5 downto 0)  := (others => 'X'); -- address
			hart_read          : in  std_logic                     := 'X';             -- read
			hart_readdata      : out std_logic_vector(31 downto 0);                    -- readdata
			hart_readdatavalid : out std_logic;                                        -- readdatavalid
			hart_waitrequest   : out std_logic;                                        -- waitrequest
			timer_irq          : out std_logic;                                        -- irq
			sw_irq             : out std_logic                                         -- irq
		);
	end component niosvprocessor_niosvprocessor_timer_module;

	component niosvprocessor_niosvprocessor_dbg_mod is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			hart_write         : in  std_logic                     := 'X';             -- write
			hart_writedata     : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			hart_address       : in  std_logic_vector(15 downto 0) := (others => 'X'); -- address
			hart_read          : in  std_logic                     := 'X';             -- read
			hart_readdata      : out std_logic_vector(31 downto 0);                    -- readdata
			hart_readdatavalid : out std_logic;                                        -- readdatavalid
			hart_waitrequest   : out std_logic;                                        -- waitrequest
			dbg_irq            : out std_logic;                                        -- irq
			dbg_reset          : out std_logic                                         -- reset
		);
	end component niosvprocessor_niosvprocessor_dbg_mod;

	component niosvprocessor_niosvprocessor_irq_mapper is
		port (
			clk           : in  std_logic                    := 'X'; -- clk
			reset         : in  std_logic                    := 'X'; -- reset
			receiver0_irq : in  std_logic                    := 'X'; -- irq
			sender_irq    : out std_logic_vector(0 downto 0)         -- irq
		);
	end component niosvprocessor_niosvprocessor_irq_mapper;

	component altera_reset_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			reset_in1      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller;

	signal irq_mapper_receiver0_irq           : std_logic; -- dbg_mod:dbg_irq -> irq_mapper:receiver0_irq
	signal hart_debug_irq_rx_irq              : std_logic; -- irq_mapper:sender_irq -> hart:irq_debug
	signal irq_mapper_001_receiver0_irq       : std_logic; -- timer_module:timer_irq -> irq_mapper_001:receiver0_irq
	signal hart_timer_irq_rx_irq              : std_logic; -- irq_mapper_001:sender_irq -> hart:irq_timer
	signal irq_mapper_002_receiver0_irq       : std_logic; -- timer_module:sw_irq -> irq_mapper_002:receiver0_irq
	signal hart_sw_irq_rx_irq                 : std_logic; -- irq_mapper_002:sender_irq -> hart:irq_sw
	signal rst_controller_reset_out_reset     : std_logic; -- rst_controller:reset_out -> hart:reset
	signal rst_controller_001_reset_out_reset : std_logic; -- rst_controller_001:reset_out -> [irq_mapper:reset, irq_mapper_001:reset, irq_mapper_002:reset, timer_module:reset]

begin

	hart : component niosvprocessor_niosvprocessor_hart
		port map (
			clk             => clk,                            --             cpu_clk.clk
			reset           => rst_controller_reset_out_reset, --           cpu_reset.reset
			core_ecc_status => open,                           --      cpu_ecc_status.ecc_status
			core_ecc_src    => open,                           --                    .ecc_source
			irq_plat_vec    => platform_irq_rx_irq,            --     platform_irq_rx.irq
			irq_debug       => hart_debug_irq_rx_irq,          --        debug_irq_rx.irq
			irq_timer       => hart_timer_irq_rx_irq,          --        timer_irq_rx.irq
			irq_sw          => hart_sw_irq_rx_irq,             --           sw_irq_rx.irq
			instr_awaddr    => instruction_manager_awaddr,     -- instruction_manager.awaddr
			instr_awsize    => instruction_manager_awsize,     --                    .awsize
			instr_awlen     => instruction_manager_awlen,      --                    .awlen
			instr_awprot    => instruction_manager_awprot,     --                    .awprot
			instr_awvalid   => instruction_manager_awvalid,    --                    .awvalid
			instr_awburst   => instruction_manager_awburst,    --                    .awburst
			instr_awready   => instruction_manager_awready,    --                    .awready
			instr_wdata     => instruction_manager_wdata,      --                    .wdata
			instr_wstrb     => instruction_manager_wstrb,      --                    .wstrb
			instr_wlast     => instruction_manager_wlast,      --                    .wlast
			instr_wvalid    => instruction_manager_wvalid,     --                    .wvalid
			instr_wready    => instruction_manager_wready,     --                    .wready
			instr_bresp     => instruction_manager_bresp,      --                    .bresp
			instr_bvalid    => instruction_manager_bvalid,     --                    .bvalid
			instr_bready    => instruction_manager_bready,     --                    .bready
			instr_araddr    => instruction_manager_araddr,     --                    .araddr
			instr_arsize    => instruction_manager_arsize,     --                    .arsize
			instr_arlen     => instruction_manager_arlen,      --                    .arlen
			instr_arprot    => instruction_manager_arprot,     --                    .arprot
			instr_arvalid   => instruction_manager_arvalid,    --                    .arvalid
			instr_arburst   => instruction_manager_arburst,    --                    .arburst
			instr_arready   => instruction_manager_arready,    --                    .arready
			instr_rdata     => instruction_manager_rdata,      --                    .rdata
			instr_rresp     => instruction_manager_rresp,      --                    .rresp
			instr_rvalid    => instruction_manager_rvalid,     --                    .rvalid
			instr_rready    => instruction_manager_rready,     --                    .rready
			instr_rlast     => instruction_manager_rlast,      --                    .rlast
			data_awaddr     => data_manager_awaddr,            --        data_manager.awaddr
			data_awsize     => data_manager_awsize,            --                    .awsize
			data_awlen      => data_manager_awlen,             --                    .awlen
			data_awprot     => data_manager_awprot,            --                    .awprot
			data_awvalid    => data_manager_awvalid,           --                    .awvalid
			data_awready    => data_manager_awready,           --                    .awready
			data_wdata      => data_manager_wdata,             --                    .wdata
			data_wstrb      => data_manager_wstrb,             --                    .wstrb
			data_wlast      => data_manager_wlast,             --                    .wlast
			data_wvalid     => data_manager_wvalid,            --                    .wvalid
			data_wready     => data_manager_wready,            --                    .wready
			data_bresp      => data_manager_bresp,             --                    .bresp
			data_bvalid     => data_manager_bvalid,            --                    .bvalid
			data_bready     => data_manager_bready,            --                    .bready
			data_araddr     => data_manager_araddr,            --                    .araddr
			data_arsize     => data_manager_arsize,            --                    .arsize
			data_arlen      => data_manager_arlen,             --                    .arlen
			data_arprot     => data_manager_arprot,            --                    .arprot
			data_arvalid    => data_manager_arvalid,           --                    .arvalid
			data_arready    => data_manager_arready,           --                    .arready
			data_rdata      => data_manager_rdata,             --                    .rdata
			data_rresp      => data_manager_rresp,             --                    .rresp
			data_rvalid     => data_manager_rvalid,            --                    .rvalid
			data_rlast      => data_manager_rlast,             --                    .rlast
			data_rready     => data_manager_rready             --                    .rready
		);

	timer_module : component niosvprocessor_niosvprocessor_timer_module
		port map (
			clk                => clk,                                --            clk.clk
			reset              => rst_controller_001_reset_out_reset, --          reset.reset
			hart_write         => timer_sw_agent_write,               -- timer_sw_agent.write
			hart_writedata     => timer_sw_agent_writedata,           --               .writedata
			hart_byteen        => timer_sw_agent_byteenable,          --               .byteenable
			hart_address       => timer_sw_agent_address,             --               .address
			hart_read          => timer_sw_agent_read,                --               .read
			hart_readdata      => timer_sw_agent_readdata,            --               .readdata
			hart_readdatavalid => timer_sw_agent_readdatavalid,       --               .readdatavalid
			hart_waitrequest   => timer_sw_agent_waitrequest,         --               .waitrequest
			timer_irq          => irq_mapper_001_receiver0_irq,       --      timer_irq.irq
			sw_irq             => irq_mapper_002_receiver0_irq        --         sw_irq.irq
		);

	dbg_mod : component niosvprocessor_niosvprocessor_dbg_mod
		port map (
			clk                => clk,                      --           clk.clk
			reset              => reset_reset,              --         reset.reset
			hart_write         => dm_agent_write,           --      dm_agent.write
			hart_writedata     => dm_agent_writedata,       --              .writedata
			hart_address       => dm_agent_address,         --              .address
			hart_read          => dm_agent_read,            --              .read
			hart_readdata      => dm_agent_readdata,        --              .readdata
			hart_readdatavalid => dm_agent_readdatavalid,   --              .readdatavalid
			hart_waitrequest   => dm_agent_waitrequest,     --              .waitrequest
			dbg_irq            => irq_mapper_receiver0_irq, --       dbg_irq.irq
			dbg_reset          => dbg_reset_out_reset       -- dbg_reset_out.reset
		);

	irq_mapper : component niosvprocessor_niosvprocessor_irq_mapper
		port map (
			clk           => clk,                                --       clk.clk
			reset         => rst_controller_001_reset_out_reset, -- clk_reset.reset
			receiver0_irq => irq_mapper_receiver0_irq,           -- receiver0.irq
			sender_irq(0) => hart_debug_irq_rx_irq               --    sender.irq
		);

	irq_mapper_001 : component niosvprocessor_niosvprocessor_irq_mapper
		port map (
			clk           => clk,                                --       clk.clk
			reset         => rst_controller_001_reset_out_reset, -- clk_reset.reset
			receiver0_irq => irq_mapper_001_receiver0_irq,       -- receiver0.irq
			sender_irq(0) => hart_timer_irq_rx_irq               --    sender.irq
		);

	irq_mapper_002 : component niosvprocessor_niosvprocessor_irq_mapper
		port map (
			clk           => clk,                                --       clk.clk
			reset         => rst_controller_001_reset_out_reset, -- clk_reset.reset
			receiver0_irq => irq_mapper_002_receiver0_irq,       -- receiver0.irq
			sender_irq(0) => hart_sw_irq_rx_irq                  --    sender.irq
		);

	rst_controller : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 2,
			OUTPUT_RESET_SYNC_EDGES   => "none",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset,                    -- reset_in0.reset
			reset_in1      => ndm_reset_in_reset,             -- reset_in1.reset
			clk            => open,                           --       clk.clk
			reset_out      => rst_controller_reset_out_reset, -- reset_out.reset
			reset_req      => open,                           -- (terminated)
			reset_req_in0  => '0',                            -- (terminated)
			reset_req_in1  => '0',                            -- (terminated)
			reset_in2      => '0',                            -- (terminated)
			reset_req_in2  => '0',                            -- (terminated)
			reset_in3      => '0',                            -- (terminated)
			reset_req_in3  => '0',                            -- (terminated)
			reset_in4      => '0',                            -- (terminated)
			reset_req_in4  => '0',                            -- (terminated)
			reset_in5      => '0',                            -- (terminated)
			reset_req_in5  => '0',                            -- (terminated)
			reset_in6      => '0',                            -- (terminated)
			reset_req_in6  => '0',                            -- (terminated)
			reset_in7      => '0',                            -- (terminated)
			reset_req_in7  => '0',                            -- (terminated)
			reset_in8      => '0',                            -- (terminated)
			reset_req_in8  => '0',                            -- (terminated)
			reset_in9      => '0',                            -- (terminated)
			reset_req_in9  => '0',                            -- (terminated)
			reset_in10     => '0',                            -- (terminated)
			reset_req_in10 => '0',                            -- (terminated)
			reset_in11     => '0',                            -- (terminated)
			reset_req_in11 => '0',                            -- (terminated)
			reset_in12     => '0',                            -- (terminated)
			reset_req_in12 => '0',                            -- (terminated)
			reset_in13     => '0',                            -- (terminated)
			reset_req_in13 => '0',                            -- (terminated)
			reset_in14     => '0',                            -- (terminated)
			reset_req_in14 => '0',                            -- (terminated)
			reset_in15     => '0',                            -- (terminated)
			reset_req_in15 => '0'                             -- (terminated)
		);

	rst_controller_001 : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 2,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset,                        -- reset_in0.reset
			reset_in1      => ndm_reset_in_reset,                 -- reset_in1.reset
			clk            => clk,                                --       clk.clk
			reset_out      => rst_controller_001_reset_out_reset, -- reset_out.reset
			reset_req      => open,                               -- (terminated)
			reset_req_in0  => '0',                                -- (terminated)
			reset_req_in1  => '0',                                -- (terminated)
			reset_in2      => '0',                                -- (terminated)
			reset_req_in2  => '0',                                -- (terminated)
			reset_in3      => '0',                                -- (terminated)
			reset_req_in3  => '0',                                -- (terminated)
			reset_in4      => '0',                                -- (terminated)
			reset_req_in4  => '0',                                -- (terminated)
			reset_in5      => '0',                                -- (terminated)
			reset_req_in5  => '0',                                -- (terminated)
			reset_in6      => '0',                                -- (terminated)
			reset_req_in6  => '0',                                -- (terminated)
			reset_in7      => '0',                                -- (terminated)
			reset_req_in7  => '0',                                -- (terminated)
			reset_in8      => '0',                                -- (terminated)
			reset_req_in8  => '0',                                -- (terminated)
			reset_in9      => '0',                                -- (terminated)
			reset_req_in9  => '0',                                -- (terminated)
			reset_in10     => '0',                                -- (terminated)
			reset_req_in10 => '0',                                -- (terminated)
			reset_in11     => '0',                                -- (terminated)
			reset_req_in11 => '0',                                -- (terminated)
			reset_in12     => '0',                                -- (terminated)
			reset_req_in12 => '0',                                -- (terminated)
			reset_in13     => '0',                                -- (terminated)
			reset_req_in13 => '0',                                -- (terminated)
			reset_in14     => '0',                                -- (terminated)
			reset_req_in14 => '0',                                -- (terminated)
			reset_in15     => '0',                                -- (terminated)
			reset_req_in15 => '0'                                 -- (terminated)
		);

end architecture rtl; -- of niosvprocessor_niosvprocessor
