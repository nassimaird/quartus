// niosvprocessor_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.1 991

`timescale 1 ps / 1 ps
module niosvprocessor_mm_interconnect_0 (
		input  wire [31:0] niosvprocessor_data_manager_awaddr,               //                niosvprocessor_data_manager.awaddr
		input  wire [7:0]  niosvprocessor_data_manager_awlen,                //                                           .awlen
		input  wire [2:0]  niosvprocessor_data_manager_awsize,               //                                           .awsize
		input  wire [2:0]  niosvprocessor_data_manager_awprot,               //                                           .awprot
		input  wire        niosvprocessor_data_manager_awvalid,              //                                           .awvalid
		output wire        niosvprocessor_data_manager_awready,              //                                           .awready
		input  wire [31:0] niosvprocessor_data_manager_wdata,                //                                           .wdata
		input  wire [3:0]  niosvprocessor_data_manager_wstrb,                //                                           .wstrb
		input  wire        niosvprocessor_data_manager_wlast,                //                                           .wlast
		input  wire        niosvprocessor_data_manager_wvalid,               //                                           .wvalid
		output wire        niosvprocessor_data_manager_wready,               //                                           .wready
		output wire [1:0]  niosvprocessor_data_manager_bresp,                //                                           .bresp
		output wire        niosvprocessor_data_manager_bvalid,               //                                           .bvalid
		input  wire        niosvprocessor_data_manager_bready,               //                                           .bready
		input  wire [31:0] niosvprocessor_data_manager_araddr,               //                                           .araddr
		input  wire [7:0]  niosvprocessor_data_manager_arlen,                //                                           .arlen
		input  wire [2:0]  niosvprocessor_data_manager_arsize,               //                                           .arsize
		input  wire [2:0]  niosvprocessor_data_manager_arprot,               //                                           .arprot
		input  wire        niosvprocessor_data_manager_arvalid,              //                                           .arvalid
		output wire        niosvprocessor_data_manager_arready,              //                                           .arready
		output wire [31:0] niosvprocessor_data_manager_rdata,                //                                           .rdata
		output wire [1:0]  niosvprocessor_data_manager_rresp,                //                                           .rresp
		output wire        niosvprocessor_data_manager_rlast,                //                                           .rlast
		output wire        niosvprocessor_data_manager_rvalid,               //                                           .rvalid
		input  wire        niosvprocessor_data_manager_rready,               //                                           .rready
		input  wire [31:0] niosvprocessor_instruction_manager_awaddr,        //         niosvprocessor_instruction_manager.awaddr
		input  wire [7:0]  niosvprocessor_instruction_manager_awlen,         //                                           .awlen
		input  wire [2:0]  niosvprocessor_instruction_manager_awsize,        //                                           .awsize
		input  wire [1:0]  niosvprocessor_instruction_manager_awburst,       //                                           .awburst
		input  wire [2:0]  niosvprocessor_instruction_manager_awprot,        //                                           .awprot
		input  wire        niosvprocessor_instruction_manager_awvalid,       //                                           .awvalid
		output wire        niosvprocessor_instruction_manager_awready,       //                                           .awready
		input  wire [31:0] niosvprocessor_instruction_manager_wdata,         //                                           .wdata
		input  wire [3:0]  niosvprocessor_instruction_manager_wstrb,         //                                           .wstrb
		input  wire        niosvprocessor_instruction_manager_wlast,         //                                           .wlast
		input  wire        niosvprocessor_instruction_manager_wvalid,        //                                           .wvalid
		output wire        niosvprocessor_instruction_manager_wready,        //                                           .wready
		output wire [1:0]  niosvprocessor_instruction_manager_bresp,         //                                           .bresp
		output wire        niosvprocessor_instruction_manager_bvalid,        //                                           .bvalid
		input  wire        niosvprocessor_instruction_manager_bready,        //                                           .bready
		input  wire [31:0] niosvprocessor_instruction_manager_araddr,        //                                           .araddr
		input  wire [7:0]  niosvprocessor_instruction_manager_arlen,         //                                           .arlen
		input  wire [2:0]  niosvprocessor_instruction_manager_arsize,        //                                           .arsize
		input  wire [1:0]  niosvprocessor_instruction_manager_arburst,       //                                           .arburst
		input  wire [2:0]  niosvprocessor_instruction_manager_arprot,        //                                           .arprot
		input  wire        niosvprocessor_instruction_manager_arvalid,       //                                           .arvalid
		output wire        niosvprocessor_instruction_manager_arready,       //                                           .arready
		output wire [31:0] niosvprocessor_instruction_manager_rdata,         //                                           .rdata
		output wire [1:0]  niosvprocessor_instruction_manager_rresp,         //                                           .rresp
		output wire        niosvprocessor_instruction_manager_rlast,         //                                           .rlast
		output wire        niosvprocessor_instruction_manager_rvalid,        //                                           .rvalid
		input  wire        niosvprocessor_instruction_manager_rready,        //                                           .rready
		input  wire        clk_0_clk_clk,                                    //                                  clk_0_clk.clk
		input  wire        niosvprocessor_reset_reset_bridge_in_reset_reset, // niosvprocessor_reset_reset_bridge_in_reset.reset
		output wire [0:0]  jtag_avalon_jtag_slave_address,                   //                     jtag_avalon_jtag_slave.address
		output wire        jtag_avalon_jtag_slave_write,                     //                                           .write
		output wire        jtag_avalon_jtag_slave_read,                      //                                           .read
		input  wire [31:0] jtag_avalon_jtag_slave_readdata,                  //                                           .readdata
		output wire [31:0] jtag_avalon_jtag_slave_writedata,                 //                                           .writedata
		input  wire        jtag_avalon_jtag_slave_waitrequest,               //                                           .waitrequest
		output wire        jtag_avalon_jtag_slave_chipselect,                //                                           .chipselect
		output wire [15:0] niosvprocessor_dm_agent_address,                  //                    niosvprocessor_dm_agent.address
		output wire        niosvprocessor_dm_agent_write,                    //                                           .write
		output wire        niosvprocessor_dm_agent_read,                     //                                           .read
		input  wire [31:0] niosvprocessor_dm_agent_readdata,                 //                                           .readdata
		output wire [31:0] niosvprocessor_dm_agent_writedata,                //                                           .writedata
		input  wire        niosvprocessor_dm_agent_readdatavalid,            //                                           .readdatavalid
		input  wire        niosvprocessor_dm_agent_waitrequest,              //                                           .waitrequest
		output wire [5:0]  niosvprocessor_timer_sw_agent_address,            //              niosvprocessor_timer_sw_agent.address
		output wire        niosvprocessor_timer_sw_agent_write,              //                                           .write
		output wire        niosvprocessor_timer_sw_agent_read,               //                                           .read
		input  wire [31:0] niosvprocessor_timer_sw_agent_readdata,           //                                           .readdata
		output wire [31:0] niosvprocessor_timer_sw_agent_writedata,          //                                           .writedata
		output wire [3:0]  niosvprocessor_timer_sw_agent_byteenable,         //                                           .byteenable
		input  wire        niosvprocessor_timer_sw_agent_readdatavalid,      //                                           .readdatavalid
		input  wire        niosvprocessor_timer_sw_agent_waitrequest,        //                                           .waitrequest
		output wire [16:0] sram_s1_address,                                  //                                    sram_s1.address
		output wire        sram_s1_write,                                    //                                           .write
		input  wire [31:0] sram_s1_readdata,                                 //                                           .readdata
		output wire [31:0] sram_s1_writedata,                                //                                           .writedata
		output wire [3:0]  sram_s1_byteenable,                               //                                           .byteenable
		output wire        sram_s1_chipselect,                               //                                           .chipselect
		output wire        sram_s1_clken                                     //                                           .clken
	);

	wire    [0:0] niosvprocessor_data_manager_translator_m0_ruser;                     // niosvprocessor_data_manager_agent:ruser -> niosvprocessor_data_manager_translator:m0_ruser
	wire    [0:0] niosvprocessor_data_manager_translator_m0_wuser;                     // niosvprocessor_data_manager_translator:m0_wuser -> niosvprocessor_data_manager_agent:wuser
	wire    [1:0] niosvprocessor_data_manager_translator_m0_awburst;                   // niosvprocessor_data_manager_translator:m0_awburst -> niosvprocessor_data_manager_agent:awburst
	wire    [3:0] niosvprocessor_data_manager_translator_m0_arregion;                  // niosvprocessor_data_manager_translator:m0_arregion -> niosvprocessor_data_manager_agent:arregion
	wire    [0:0] niosvprocessor_data_manager_translator_m0_awuser;                    // niosvprocessor_data_manager_translator:m0_awuser -> niosvprocessor_data_manager_agent:awuser
	wire    [7:0] niosvprocessor_data_manager_translator_m0_arlen;                     // niosvprocessor_data_manager_translator:m0_arlen -> niosvprocessor_data_manager_agent:arlen
	wire    [3:0] niosvprocessor_data_manager_translator_m0_arqos;                     // niosvprocessor_data_manager_translator:m0_arqos -> niosvprocessor_data_manager_agent:arqos
	wire    [3:0] niosvprocessor_data_manager_translator_m0_wstrb;                     // niosvprocessor_data_manager_translator:m0_wstrb -> niosvprocessor_data_manager_agent:wstrb
	wire          niosvprocessor_data_manager_translator_m0_wready;                    // niosvprocessor_data_manager_agent:wready -> niosvprocessor_data_manager_translator:m0_wready
	wire    [0:0] niosvprocessor_data_manager_translator_m0_rid;                       // niosvprocessor_data_manager_agent:rid -> niosvprocessor_data_manager_translator:m0_rid
	wire          niosvprocessor_data_manager_translator_m0_rready;                    // niosvprocessor_data_manager_translator:m0_rready -> niosvprocessor_data_manager_agent:rready
	wire    [7:0] niosvprocessor_data_manager_translator_m0_awlen;                     // niosvprocessor_data_manager_translator:m0_awlen -> niosvprocessor_data_manager_agent:awlen
	wire    [3:0] niosvprocessor_data_manager_translator_m0_awqos;                     // niosvprocessor_data_manager_translator:m0_awqos -> niosvprocessor_data_manager_agent:awqos
	wire    [3:0] niosvprocessor_data_manager_translator_m0_arcache;                   // niosvprocessor_data_manager_translator:m0_arcache -> niosvprocessor_data_manager_agent:arcache
	wire          niosvprocessor_data_manager_translator_m0_wvalid;                    // niosvprocessor_data_manager_translator:m0_wvalid -> niosvprocessor_data_manager_agent:wvalid
	wire   [31:0] niosvprocessor_data_manager_translator_m0_araddr;                    // niosvprocessor_data_manager_translator:m0_araddr -> niosvprocessor_data_manager_agent:araddr
	wire    [2:0] niosvprocessor_data_manager_translator_m0_arprot;                    // niosvprocessor_data_manager_translator:m0_arprot -> niosvprocessor_data_manager_agent:arprot
	wire    [2:0] niosvprocessor_data_manager_translator_m0_awprot;                    // niosvprocessor_data_manager_translator:m0_awprot -> niosvprocessor_data_manager_agent:awprot
	wire   [31:0] niosvprocessor_data_manager_translator_m0_wdata;                     // niosvprocessor_data_manager_translator:m0_wdata -> niosvprocessor_data_manager_agent:wdata
	wire          niosvprocessor_data_manager_translator_m0_arvalid;                   // niosvprocessor_data_manager_translator:m0_arvalid -> niosvprocessor_data_manager_agent:arvalid
	wire    [3:0] niosvprocessor_data_manager_translator_m0_awcache;                   // niosvprocessor_data_manager_translator:m0_awcache -> niosvprocessor_data_manager_agent:awcache
	wire    [0:0] niosvprocessor_data_manager_translator_m0_arid;                      // niosvprocessor_data_manager_translator:m0_arid -> niosvprocessor_data_manager_agent:arid
	wire    [0:0] niosvprocessor_data_manager_translator_m0_arlock;                    // niosvprocessor_data_manager_translator:m0_arlock -> niosvprocessor_data_manager_agent:arlock
	wire    [0:0] niosvprocessor_data_manager_translator_m0_awlock;                    // niosvprocessor_data_manager_translator:m0_awlock -> niosvprocessor_data_manager_agent:awlock
	wire   [31:0] niosvprocessor_data_manager_translator_m0_awaddr;                    // niosvprocessor_data_manager_translator:m0_awaddr -> niosvprocessor_data_manager_agent:awaddr
	wire    [1:0] niosvprocessor_data_manager_translator_m0_bresp;                     // niosvprocessor_data_manager_agent:bresp -> niosvprocessor_data_manager_translator:m0_bresp
	wire          niosvprocessor_data_manager_translator_m0_arready;                   // niosvprocessor_data_manager_agent:arready -> niosvprocessor_data_manager_translator:m0_arready
	wire   [31:0] niosvprocessor_data_manager_translator_m0_rdata;                     // niosvprocessor_data_manager_agent:rdata -> niosvprocessor_data_manager_translator:m0_rdata
	wire          niosvprocessor_data_manager_translator_m0_awready;                   // niosvprocessor_data_manager_agent:awready -> niosvprocessor_data_manager_translator:m0_awready
	wire    [1:0] niosvprocessor_data_manager_translator_m0_arburst;                   // niosvprocessor_data_manager_translator:m0_arburst -> niosvprocessor_data_manager_agent:arburst
	wire    [2:0] niosvprocessor_data_manager_translator_m0_arsize;                    // niosvprocessor_data_manager_translator:m0_arsize -> niosvprocessor_data_manager_agent:arsize
	wire          niosvprocessor_data_manager_translator_m0_bready;                    // niosvprocessor_data_manager_translator:m0_bready -> niosvprocessor_data_manager_agent:bready
	wire          niosvprocessor_data_manager_translator_m0_rlast;                     // niosvprocessor_data_manager_agent:rlast -> niosvprocessor_data_manager_translator:m0_rlast
	wire          niosvprocessor_data_manager_translator_m0_wlast;                     // niosvprocessor_data_manager_translator:m0_wlast -> niosvprocessor_data_manager_agent:wlast
	wire    [3:0] niosvprocessor_data_manager_translator_m0_awregion;                  // niosvprocessor_data_manager_translator:m0_awregion -> niosvprocessor_data_manager_agent:awregion
	wire    [0:0] niosvprocessor_data_manager_translator_m0_buser;                     // niosvprocessor_data_manager_agent:buser -> niosvprocessor_data_manager_translator:m0_buser
	wire    [1:0] niosvprocessor_data_manager_translator_m0_rresp;                     // niosvprocessor_data_manager_agent:rresp -> niosvprocessor_data_manager_translator:m0_rresp
	wire    [0:0] niosvprocessor_data_manager_translator_m0_awid;                      // niosvprocessor_data_manager_translator:m0_awid -> niosvprocessor_data_manager_agent:awid
	wire    [0:0] niosvprocessor_data_manager_translator_m0_bid;                       // niosvprocessor_data_manager_agent:bid -> niosvprocessor_data_manager_translator:m0_bid
	wire          niosvprocessor_data_manager_translator_m0_bvalid;                    // niosvprocessor_data_manager_agent:bvalid -> niosvprocessor_data_manager_translator:m0_bvalid
	wire    [2:0] niosvprocessor_data_manager_translator_m0_awsize;                    // niosvprocessor_data_manager_translator:m0_awsize -> niosvprocessor_data_manager_agent:awsize
	wire          niosvprocessor_data_manager_translator_m0_awvalid;                   // niosvprocessor_data_manager_translator:m0_awvalid -> niosvprocessor_data_manager_agent:awvalid
	wire    [0:0] niosvprocessor_data_manager_translator_m0_aruser;                    // niosvprocessor_data_manager_translator:m0_aruser -> niosvprocessor_data_manager_agent:aruser
	wire          niosvprocessor_data_manager_translator_m0_rvalid;                    // niosvprocessor_data_manager_agent:rvalid -> niosvprocessor_data_manager_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                                   // rsp_mux:src_valid -> niosvprocessor_data_manager_agent:write_rp_valid
	wire  [120:0] rsp_mux_src_data;                                                    // rsp_mux:src_data -> niosvprocessor_data_manager_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                   // niosvprocessor_data_manager_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                 // rsp_mux:src_channel -> niosvprocessor_data_manager_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                           // rsp_mux:src_startofpacket -> niosvprocessor_data_manager_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                             // rsp_mux:src_endofpacket -> niosvprocessor_data_manager_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                               // rsp_mux_001:src_valid -> niosvprocessor_data_manager_agent:read_rp_valid
	wire  [120:0] rsp_mux_001_src_data;                                                // rsp_mux_001:src_data -> niosvprocessor_data_manager_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                               // niosvprocessor_data_manager_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                             // rsp_mux_001:src_channel -> niosvprocessor_data_manager_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                       // rsp_mux_001:src_startofpacket -> niosvprocessor_data_manager_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                         // rsp_mux_001:src_endofpacket -> niosvprocessor_data_manager_agent:read_rp_endofpacket
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_ruser;              // niosvprocessor_instruction_manager_agent:ruser -> niosvprocessor_instruction_manager_translator:m0_ruser
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_wuser;              // niosvprocessor_instruction_manager_translator:m0_wuser -> niosvprocessor_instruction_manager_agent:wuser
	wire    [1:0] niosvprocessor_instruction_manager_translator_m0_awburst;            // niosvprocessor_instruction_manager_translator:m0_awburst -> niosvprocessor_instruction_manager_agent:awburst
	wire    [3:0] niosvprocessor_instruction_manager_translator_m0_arregion;           // niosvprocessor_instruction_manager_translator:m0_arregion -> niosvprocessor_instruction_manager_agent:arregion
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_awuser;             // niosvprocessor_instruction_manager_translator:m0_awuser -> niosvprocessor_instruction_manager_agent:awuser
	wire    [7:0] niosvprocessor_instruction_manager_translator_m0_arlen;              // niosvprocessor_instruction_manager_translator:m0_arlen -> niosvprocessor_instruction_manager_agent:arlen
	wire    [3:0] niosvprocessor_instruction_manager_translator_m0_arqos;              // niosvprocessor_instruction_manager_translator:m0_arqos -> niosvprocessor_instruction_manager_agent:arqos
	wire    [3:0] niosvprocessor_instruction_manager_translator_m0_wstrb;              // niosvprocessor_instruction_manager_translator:m0_wstrb -> niosvprocessor_instruction_manager_agent:wstrb
	wire          niosvprocessor_instruction_manager_translator_m0_wready;             // niosvprocessor_instruction_manager_agent:wready -> niosvprocessor_instruction_manager_translator:m0_wready
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_rid;                // niosvprocessor_instruction_manager_agent:rid -> niosvprocessor_instruction_manager_translator:m0_rid
	wire          niosvprocessor_instruction_manager_translator_m0_rready;             // niosvprocessor_instruction_manager_translator:m0_rready -> niosvprocessor_instruction_manager_agent:rready
	wire    [7:0] niosvprocessor_instruction_manager_translator_m0_awlen;              // niosvprocessor_instruction_manager_translator:m0_awlen -> niosvprocessor_instruction_manager_agent:awlen
	wire    [3:0] niosvprocessor_instruction_manager_translator_m0_awqos;              // niosvprocessor_instruction_manager_translator:m0_awqos -> niosvprocessor_instruction_manager_agent:awqos
	wire    [3:0] niosvprocessor_instruction_manager_translator_m0_arcache;            // niosvprocessor_instruction_manager_translator:m0_arcache -> niosvprocessor_instruction_manager_agent:arcache
	wire          niosvprocessor_instruction_manager_translator_m0_wvalid;             // niosvprocessor_instruction_manager_translator:m0_wvalid -> niosvprocessor_instruction_manager_agent:wvalid
	wire   [31:0] niosvprocessor_instruction_manager_translator_m0_araddr;             // niosvprocessor_instruction_manager_translator:m0_araddr -> niosvprocessor_instruction_manager_agent:araddr
	wire    [2:0] niosvprocessor_instruction_manager_translator_m0_arprot;             // niosvprocessor_instruction_manager_translator:m0_arprot -> niosvprocessor_instruction_manager_agent:arprot
	wire    [2:0] niosvprocessor_instruction_manager_translator_m0_awprot;             // niosvprocessor_instruction_manager_translator:m0_awprot -> niosvprocessor_instruction_manager_agent:awprot
	wire   [31:0] niosvprocessor_instruction_manager_translator_m0_wdata;              // niosvprocessor_instruction_manager_translator:m0_wdata -> niosvprocessor_instruction_manager_agent:wdata
	wire          niosvprocessor_instruction_manager_translator_m0_arvalid;            // niosvprocessor_instruction_manager_translator:m0_arvalid -> niosvprocessor_instruction_manager_agent:arvalid
	wire    [3:0] niosvprocessor_instruction_manager_translator_m0_awcache;            // niosvprocessor_instruction_manager_translator:m0_awcache -> niosvprocessor_instruction_manager_agent:awcache
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_arid;               // niosvprocessor_instruction_manager_translator:m0_arid -> niosvprocessor_instruction_manager_agent:arid
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_arlock;             // niosvprocessor_instruction_manager_translator:m0_arlock -> niosvprocessor_instruction_manager_agent:arlock
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_awlock;             // niosvprocessor_instruction_manager_translator:m0_awlock -> niosvprocessor_instruction_manager_agent:awlock
	wire   [31:0] niosvprocessor_instruction_manager_translator_m0_awaddr;             // niosvprocessor_instruction_manager_translator:m0_awaddr -> niosvprocessor_instruction_manager_agent:awaddr
	wire    [1:0] niosvprocessor_instruction_manager_translator_m0_bresp;              // niosvprocessor_instruction_manager_agent:bresp -> niosvprocessor_instruction_manager_translator:m0_bresp
	wire          niosvprocessor_instruction_manager_translator_m0_arready;            // niosvprocessor_instruction_manager_agent:arready -> niosvprocessor_instruction_manager_translator:m0_arready
	wire   [31:0] niosvprocessor_instruction_manager_translator_m0_rdata;              // niosvprocessor_instruction_manager_agent:rdata -> niosvprocessor_instruction_manager_translator:m0_rdata
	wire          niosvprocessor_instruction_manager_translator_m0_awready;            // niosvprocessor_instruction_manager_agent:awready -> niosvprocessor_instruction_manager_translator:m0_awready
	wire    [1:0] niosvprocessor_instruction_manager_translator_m0_arburst;            // niosvprocessor_instruction_manager_translator:m0_arburst -> niosvprocessor_instruction_manager_agent:arburst
	wire    [2:0] niosvprocessor_instruction_manager_translator_m0_arsize;             // niosvprocessor_instruction_manager_translator:m0_arsize -> niosvprocessor_instruction_manager_agent:arsize
	wire          niosvprocessor_instruction_manager_translator_m0_bready;             // niosvprocessor_instruction_manager_translator:m0_bready -> niosvprocessor_instruction_manager_agent:bready
	wire          niosvprocessor_instruction_manager_translator_m0_rlast;              // niosvprocessor_instruction_manager_agent:rlast -> niosvprocessor_instruction_manager_translator:m0_rlast
	wire          niosvprocessor_instruction_manager_translator_m0_wlast;              // niosvprocessor_instruction_manager_translator:m0_wlast -> niosvprocessor_instruction_manager_agent:wlast
	wire    [3:0] niosvprocessor_instruction_manager_translator_m0_awregion;           // niosvprocessor_instruction_manager_translator:m0_awregion -> niosvprocessor_instruction_manager_agent:awregion
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_buser;              // niosvprocessor_instruction_manager_agent:buser -> niosvprocessor_instruction_manager_translator:m0_buser
	wire    [1:0] niosvprocessor_instruction_manager_translator_m0_rresp;              // niosvprocessor_instruction_manager_agent:rresp -> niosvprocessor_instruction_manager_translator:m0_rresp
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_awid;               // niosvprocessor_instruction_manager_translator:m0_awid -> niosvprocessor_instruction_manager_agent:awid
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_bid;                // niosvprocessor_instruction_manager_agent:bid -> niosvprocessor_instruction_manager_translator:m0_bid
	wire          niosvprocessor_instruction_manager_translator_m0_bvalid;             // niosvprocessor_instruction_manager_agent:bvalid -> niosvprocessor_instruction_manager_translator:m0_bvalid
	wire    [2:0] niosvprocessor_instruction_manager_translator_m0_awsize;             // niosvprocessor_instruction_manager_translator:m0_awsize -> niosvprocessor_instruction_manager_agent:awsize
	wire          niosvprocessor_instruction_manager_translator_m0_awvalid;            // niosvprocessor_instruction_manager_translator:m0_awvalid -> niosvprocessor_instruction_manager_agent:awvalid
	wire    [0:0] niosvprocessor_instruction_manager_translator_m0_aruser;             // niosvprocessor_instruction_manager_translator:m0_aruser -> niosvprocessor_instruction_manager_agent:aruser
	wire          niosvprocessor_instruction_manager_translator_m0_rvalid;             // niosvprocessor_instruction_manager_agent:rvalid -> niosvprocessor_instruction_manager_translator:m0_rvalid
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_readdata;                            // jtag_avalon_jtag_slave_translator:uav_readdata -> jtag_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_avalon_jtag_slave_agent_m0_waitrequest;                         // jtag_avalon_jtag_slave_translator:uav_waitrequest -> jtag_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_avalon_jtag_slave_agent_m0_debugaccess;                         // jtag_avalon_jtag_slave_agent:m0_debugaccess -> jtag_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_address;                             // jtag_avalon_jtag_slave_agent:m0_address -> jtag_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_avalon_jtag_slave_agent_m0_byteenable;                          // jtag_avalon_jtag_slave_agent:m0_byteenable -> jtag_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_avalon_jtag_slave_agent_m0_read;                                // jtag_avalon_jtag_slave_agent:m0_read -> jtag_avalon_jtag_slave_translator:uav_read
	wire          jtag_avalon_jtag_slave_agent_m0_readdatavalid;                       // jtag_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_avalon_jtag_slave_agent_m0_lock;                                // jtag_avalon_jtag_slave_agent:m0_lock -> jtag_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_writedata;                           // jtag_avalon_jtag_slave_agent:m0_writedata -> jtag_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_avalon_jtag_slave_agent_m0_write;                               // jtag_avalon_jtag_slave_agent:m0_write -> jtag_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_avalon_jtag_slave_agent_m0_burstcount;                          // jtag_avalon_jtag_slave_agent:m0_burstcount -> jtag_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_avalon_jtag_slave_agent_rf_source_valid;                        // jtag_avalon_jtag_slave_agent:rf_source_valid -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [121:0] jtag_avalon_jtag_slave_agent_rf_source_data;                         // jtag_avalon_jtag_slave_agent:rf_source_data -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_avalon_jtag_slave_agent_rf_source_ready;                        // jtag_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_avalon_jtag_slave_agent_rf_source_startofpacket;                // jtag_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rf_source_endofpacket;                  // jtag_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid;                     // jtag_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_avalon_jtag_slave_agent:rf_sink_valid
	wire  [121:0] jtag_avalon_jtag_slave_agent_rsp_fifo_out_data;                      // jtag_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready;                     // jtag_avalon_jtag_slave_agent:rf_sink_ready -> jtag_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;             // jtag_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;               // jtag_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid;                   // jtag_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_avalon_jtag_slave_agent_rdata_fifo_src_data;                    // jtag_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready;                   // jtag_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] niosvprocessor_dm_agent_agent_m0_readdata;                           // niosvprocessor_dm_agent_translator:uav_readdata -> niosvprocessor_dm_agent_agent:m0_readdata
	wire          niosvprocessor_dm_agent_agent_m0_waitrequest;                        // niosvprocessor_dm_agent_translator:uav_waitrequest -> niosvprocessor_dm_agent_agent:m0_waitrequest
	wire          niosvprocessor_dm_agent_agent_m0_debugaccess;                        // niosvprocessor_dm_agent_agent:m0_debugaccess -> niosvprocessor_dm_agent_translator:uav_debugaccess
	wire   [31:0] niosvprocessor_dm_agent_agent_m0_address;                            // niosvprocessor_dm_agent_agent:m0_address -> niosvprocessor_dm_agent_translator:uav_address
	wire    [3:0] niosvprocessor_dm_agent_agent_m0_byteenable;                         // niosvprocessor_dm_agent_agent:m0_byteenable -> niosvprocessor_dm_agent_translator:uav_byteenable
	wire          niosvprocessor_dm_agent_agent_m0_read;                               // niosvprocessor_dm_agent_agent:m0_read -> niosvprocessor_dm_agent_translator:uav_read
	wire          niosvprocessor_dm_agent_agent_m0_readdatavalid;                      // niosvprocessor_dm_agent_translator:uav_readdatavalid -> niosvprocessor_dm_agent_agent:m0_readdatavalid
	wire          niosvprocessor_dm_agent_agent_m0_lock;                               // niosvprocessor_dm_agent_agent:m0_lock -> niosvprocessor_dm_agent_translator:uav_lock
	wire   [31:0] niosvprocessor_dm_agent_agent_m0_writedata;                          // niosvprocessor_dm_agent_agent:m0_writedata -> niosvprocessor_dm_agent_translator:uav_writedata
	wire          niosvprocessor_dm_agent_agent_m0_write;                              // niosvprocessor_dm_agent_agent:m0_write -> niosvprocessor_dm_agent_translator:uav_write
	wire    [2:0] niosvprocessor_dm_agent_agent_m0_burstcount;                         // niosvprocessor_dm_agent_agent:m0_burstcount -> niosvprocessor_dm_agent_translator:uav_burstcount
	wire          niosvprocessor_dm_agent_agent_rf_source_valid;                       // niosvprocessor_dm_agent_agent:rf_source_valid -> niosvprocessor_dm_agent_agent_rsp_fifo:in_valid
	wire  [121:0] niosvprocessor_dm_agent_agent_rf_source_data;                        // niosvprocessor_dm_agent_agent:rf_source_data -> niosvprocessor_dm_agent_agent_rsp_fifo:in_data
	wire          niosvprocessor_dm_agent_agent_rf_source_ready;                       // niosvprocessor_dm_agent_agent_rsp_fifo:in_ready -> niosvprocessor_dm_agent_agent:rf_source_ready
	wire          niosvprocessor_dm_agent_agent_rf_source_startofpacket;               // niosvprocessor_dm_agent_agent:rf_source_startofpacket -> niosvprocessor_dm_agent_agent_rsp_fifo:in_startofpacket
	wire          niosvprocessor_dm_agent_agent_rf_source_endofpacket;                 // niosvprocessor_dm_agent_agent:rf_source_endofpacket -> niosvprocessor_dm_agent_agent_rsp_fifo:in_endofpacket
	wire          niosvprocessor_dm_agent_agent_rsp_fifo_out_valid;                    // niosvprocessor_dm_agent_agent_rsp_fifo:out_valid -> niosvprocessor_dm_agent_agent:rf_sink_valid
	wire  [121:0] niosvprocessor_dm_agent_agent_rsp_fifo_out_data;                     // niosvprocessor_dm_agent_agent_rsp_fifo:out_data -> niosvprocessor_dm_agent_agent:rf_sink_data
	wire          niosvprocessor_dm_agent_agent_rsp_fifo_out_ready;                    // niosvprocessor_dm_agent_agent:rf_sink_ready -> niosvprocessor_dm_agent_agent_rsp_fifo:out_ready
	wire          niosvprocessor_dm_agent_agent_rsp_fifo_out_startofpacket;            // niosvprocessor_dm_agent_agent_rsp_fifo:out_startofpacket -> niosvprocessor_dm_agent_agent:rf_sink_startofpacket
	wire          niosvprocessor_dm_agent_agent_rsp_fifo_out_endofpacket;              // niosvprocessor_dm_agent_agent_rsp_fifo:out_endofpacket -> niosvprocessor_dm_agent_agent:rf_sink_endofpacket
	wire          niosvprocessor_dm_agent_agent_rdata_fifo_src_valid;                  // niosvprocessor_dm_agent_agent:rdata_fifo_src_valid -> niosvprocessor_dm_agent_agent_rdata_fifo:in_valid
	wire   [33:0] niosvprocessor_dm_agent_agent_rdata_fifo_src_data;                   // niosvprocessor_dm_agent_agent:rdata_fifo_src_data -> niosvprocessor_dm_agent_agent_rdata_fifo:in_data
	wire          niosvprocessor_dm_agent_agent_rdata_fifo_src_ready;                  // niosvprocessor_dm_agent_agent_rdata_fifo:in_ready -> niosvprocessor_dm_agent_agent:rdata_fifo_src_ready
	wire   [31:0] sram_s1_agent_m0_readdata;                                           // sram_s1_translator:uav_readdata -> sram_s1_agent:m0_readdata
	wire          sram_s1_agent_m0_waitrequest;                                        // sram_s1_translator:uav_waitrequest -> sram_s1_agent:m0_waitrequest
	wire          sram_s1_agent_m0_debugaccess;                                        // sram_s1_agent:m0_debugaccess -> sram_s1_translator:uav_debugaccess
	wire   [31:0] sram_s1_agent_m0_address;                                            // sram_s1_agent:m0_address -> sram_s1_translator:uav_address
	wire    [3:0] sram_s1_agent_m0_byteenable;                                         // sram_s1_agent:m0_byteenable -> sram_s1_translator:uav_byteenable
	wire          sram_s1_agent_m0_read;                                               // sram_s1_agent:m0_read -> sram_s1_translator:uav_read
	wire          sram_s1_agent_m0_readdatavalid;                                      // sram_s1_translator:uav_readdatavalid -> sram_s1_agent:m0_readdatavalid
	wire          sram_s1_agent_m0_lock;                                               // sram_s1_agent:m0_lock -> sram_s1_translator:uav_lock
	wire   [31:0] sram_s1_agent_m0_writedata;                                          // sram_s1_agent:m0_writedata -> sram_s1_translator:uav_writedata
	wire          sram_s1_agent_m0_write;                                              // sram_s1_agent:m0_write -> sram_s1_translator:uav_write
	wire    [2:0] sram_s1_agent_m0_burstcount;                                         // sram_s1_agent:m0_burstcount -> sram_s1_translator:uav_burstcount
	wire          sram_s1_agent_rf_source_valid;                                       // sram_s1_agent:rf_source_valid -> sram_s1_agent_rsp_fifo:in_valid
	wire  [121:0] sram_s1_agent_rf_source_data;                                        // sram_s1_agent:rf_source_data -> sram_s1_agent_rsp_fifo:in_data
	wire          sram_s1_agent_rf_source_ready;                                       // sram_s1_agent_rsp_fifo:in_ready -> sram_s1_agent:rf_source_ready
	wire          sram_s1_agent_rf_source_startofpacket;                               // sram_s1_agent:rf_source_startofpacket -> sram_s1_agent_rsp_fifo:in_startofpacket
	wire          sram_s1_agent_rf_source_endofpacket;                                 // sram_s1_agent:rf_source_endofpacket -> sram_s1_agent_rsp_fifo:in_endofpacket
	wire          sram_s1_agent_rsp_fifo_out_valid;                                    // sram_s1_agent_rsp_fifo:out_valid -> sram_s1_agent:rf_sink_valid
	wire  [121:0] sram_s1_agent_rsp_fifo_out_data;                                     // sram_s1_agent_rsp_fifo:out_data -> sram_s1_agent:rf_sink_data
	wire          sram_s1_agent_rsp_fifo_out_ready;                                    // sram_s1_agent:rf_sink_ready -> sram_s1_agent_rsp_fifo:out_ready
	wire          sram_s1_agent_rsp_fifo_out_startofpacket;                            // sram_s1_agent_rsp_fifo:out_startofpacket -> sram_s1_agent:rf_sink_startofpacket
	wire          sram_s1_agent_rsp_fifo_out_endofpacket;                              // sram_s1_agent_rsp_fifo:out_endofpacket -> sram_s1_agent:rf_sink_endofpacket
	wire          sram_s1_agent_rdata_fifo_src_valid;                                  // sram_s1_agent:rdata_fifo_src_valid -> sram_s1_agent_rdata_fifo:in_valid
	wire   [33:0] sram_s1_agent_rdata_fifo_src_data;                                   // sram_s1_agent:rdata_fifo_src_data -> sram_s1_agent_rdata_fifo:in_data
	wire          sram_s1_agent_rdata_fifo_src_ready;                                  // sram_s1_agent_rdata_fifo:in_ready -> sram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] niosvprocessor_timer_sw_agent_agent_m0_readdata;                     // niosvprocessor_timer_sw_agent_translator:uav_readdata -> niosvprocessor_timer_sw_agent_agent:m0_readdata
	wire          niosvprocessor_timer_sw_agent_agent_m0_waitrequest;                  // niosvprocessor_timer_sw_agent_translator:uav_waitrequest -> niosvprocessor_timer_sw_agent_agent:m0_waitrequest
	wire          niosvprocessor_timer_sw_agent_agent_m0_debugaccess;                  // niosvprocessor_timer_sw_agent_agent:m0_debugaccess -> niosvprocessor_timer_sw_agent_translator:uav_debugaccess
	wire   [31:0] niosvprocessor_timer_sw_agent_agent_m0_address;                      // niosvprocessor_timer_sw_agent_agent:m0_address -> niosvprocessor_timer_sw_agent_translator:uav_address
	wire    [3:0] niosvprocessor_timer_sw_agent_agent_m0_byteenable;                   // niosvprocessor_timer_sw_agent_agent:m0_byteenable -> niosvprocessor_timer_sw_agent_translator:uav_byteenable
	wire          niosvprocessor_timer_sw_agent_agent_m0_read;                         // niosvprocessor_timer_sw_agent_agent:m0_read -> niosvprocessor_timer_sw_agent_translator:uav_read
	wire          niosvprocessor_timer_sw_agent_agent_m0_readdatavalid;                // niosvprocessor_timer_sw_agent_translator:uav_readdatavalid -> niosvprocessor_timer_sw_agent_agent:m0_readdatavalid
	wire          niosvprocessor_timer_sw_agent_agent_m0_lock;                         // niosvprocessor_timer_sw_agent_agent:m0_lock -> niosvprocessor_timer_sw_agent_translator:uav_lock
	wire   [31:0] niosvprocessor_timer_sw_agent_agent_m0_writedata;                    // niosvprocessor_timer_sw_agent_agent:m0_writedata -> niosvprocessor_timer_sw_agent_translator:uav_writedata
	wire          niosvprocessor_timer_sw_agent_agent_m0_write;                        // niosvprocessor_timer_sw_agent_agent:m0_write -> niosvprocessor_timer_sw_agent_translator:uav_write
	wire    [2:0] niosvprocessor_timer_sw_agent_agent_m0_burstcount;                   // niosvprocessor_timer_sw_agent_agent:m0_burstcount -> niosvprocessor_timer_sw_agent_translator:uav_burstcount
	wire          niosvprocessor_timer_sw_agent_agent_rf_source_valid;                 // niosvprocessor_timer_sw_agent_agent:rf_source_valid -> niosvprocessor_timer_sw_agent_agent_rsp_fifo:in_valid
	wire  [121:0] niosvprocessor_timer_sw_agent_agent_rf_source_data;                  // niosvprocessor_timer_sw_agent_agent:rf_source_data -> niosvprocessor_timer_sw_agent_agent_rsp_fifo:in_data
	wire          niosvprocessor_timer_sw_agent_agent_rf_source_ready;                 // niosvprocessor_timer_sw_agent_agent_rsp_fifo:in_ready -> niosvprocessor_timer_sw_agent_agent:rf_source_ready
	wire          niosvprocessor_timer_sw_agent_agent_rf_source_startofpacket;         // niosvprocessor_timer_sw_agent_agent:rf_source_startofpacket -> niosvprocessor_timer_sw_agent_agent_rsp_fifo:in_startofpacket
	wire          niosvprocessor_timer_sw_agent_agent_rf_source_endofpacket;           // niosvprocessor_timer_sw_agent_agent:rf_source_endofpacket -> niosvprocessor_timer_sw_agent_agent_rsp_fifo:in_endofpacket
	wire          niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_valid;              // niosvprocessor_timer_sw_agent_agent_rsp_fifo:out_valid -> niosvprocessor_timer_sw_agent_agent:rf_sink_valid
	wire  [121:0] niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_data;               // niosvprocessor_timer_sw_agent_agent_rsp_fifo:out_data -> niosvprocessor_timer_sw_agent_agent:rf_sink_data
	wire          niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_ready;              // niosvprocessor_timer_sw_agent_agent:rf_sink_ready -> niosvprocessor_timer_sw_agent_agent_rsp_fifo:out_ready
	wire          niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_startofpacket;      // niosvprocessor_timer_sw_agent_agent_rsp_fifo:out_startofpacket -> niosvprocessor_timer_sw_agent_agent:rf_sink_startofpacket
	wire          niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_endofpacket;        // niosvprocessor_timer_sw_agent_agent_rsp_fifo:out_endofpacket -> niosvprocessor_timer_sw_agent_agent:rf_sink_endofpacket
	wire          niosvprocessor_timer_sw_agent_agent_rdata_fifo_src_valid;            // niosvprocessor_timer_sw_agent_agent:rdata_fifo_src_valid -> niosvprocessor_timer_sw_agent_agent_rdata_fifo:in_valid
	wire   [33:0] niosvprocessor_timer_sw_agent_agent_rdata_fifo_src_data;             // niosvprocessor_timer_sw_agent_agent:rdata_fifo_src_data -> niosvprocessor_timer_sw_agent_agent_rdata_fifo:in_data
	wire          niosvprocessor_timer_sw_agent_agent_rdata_fifo_src_ready;            // niosvprocessor_timer_sw_agent_agent_rdata_fifo:in_ready -> niosvprocessor_timer_sw_agent_agent:rdata_fifo_src_ready
	wire          niosvprocessor_data_manager_agent_write_cp_valid;                    // niosvprocessor_data_manager_agent:write_cp_valid -> router:sink_valid
	wire  [120:0] niosvprocessor_data_manager_agent_write_cp_data;                     // niosvprocessor_data_manager_agent:write_cp_data -> router:sink_data
	wire          niosvprocessor_data_manager_agent_write_cp_ready;                    // router:sink_ready -> niosvprocessor_data_manager_agent:write_cp_ready
	wire          niosvprocessor_data_manager_agent_write_cp_startofpacket;            // niosvprocessor_data_manager_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          niosvprocessor_data_manager_agent_write_cp_endofpacket;              // niosvprocessor_data_manager_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                    // router:src_valid -> cmd_demux:sink_valid
	wire  [120:0] router_src_data;                                                     // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                    // cmd_demux:sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                  // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                            // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                              // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          niosvprocessor_data_manager_agent_read_cp_valid;                     // niosvprocessor_data_manager_agent:read_cp_valid -> router_001:sink_valid
	wire  [120:0] niosvprocessor_data_manager_agent_read_cp_data;                      // niosvprocessor_data_manager_agent:read_cp_data -> router_001:sink_data
	wire          niosvprocessor_data_manager_agent_read_cp_ready;                     // router_001:sink_ready -> niosvprocessor_data_manager_agent:read_cp_ready
	wire          niosvprocessor_data_manager_agent_read_cp_startofpacket;             // niosvprocessor_data_manager_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          niosvprocessor_data_manager_agent_read_cp_endofpacket;               // niosvprocessor_data_manager_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [120:0] router_001_src_data;                                                 // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                              // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                        // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                          // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          niosvprocessor_instruction_manager_agent_write_cp_valid;             // niosvprocessor_instruction_manager_agent:write_cp_valid -> router_002:sink_valid
	wire  [120:0] niosvprocessor_instruction_manager_agent_write_cp_data;              // niosvprocessor_instruction_manager_agent:write_cp_data -> router_002:sink_data
	wire          niosvprocessor_instruction_manager_agent_write_cp_ready;             // router_002:sink_ready -> niosvprocessor_instruction_manager_agent:write_cp_ready
	wire          niosvprocessor_instruction_manager_agent_write_cp_startofpacket;     // niosvprocessor_instruction_manager_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          niosvprocessor_instruction_manager_agent_write_cp_endofpacket;       // niosvprocessor_instruction_manager_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          niosvprocessor_instruction_manager_agent_read_cp_valid;              // niosvprocessor_instruction_manager_agent:read_cp_valid -> router_003:sink_valid
	wire  [120:0] niosvprocessor_instruction_manager_agent_read_cp_data;               // niosvprocessor_instruction_manager_agent:read_cp_data -> router_003:sink_data
	wire          niosvprocessor_instruction_manager_agent_read_cp_ready;              // router_003:sink_ready -> niosvprocessor_instruction_manager_agent:read_cp_ready
	wire          niosvprocessor_instruction_manager_agent_read_cp_startofpacket;      // niosvprocessor_instruction_manager_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          niosvprocessor_instruction_manager_agent_read_cp_endofpacket;        // niosvprocessor_instruction_manager_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rp_valid;                               // jtag_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	wire  [120:0] jtag_avalon_jtag_slave_agent_rp_data;                                // jtag_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	wire          jtag_avalon_jtag_slave_agent_rp_ready;                               // router_004:sink_ready -> jtag_avalon_jtag_slave_agent:rp_ready
	wire          jtag_avalon_jtag_slave_agent_rp_startofpacket;                       // jtag_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rp_endofpacket;                         // jtag_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                // router_004:src_valid -> rsp_demux:sink_valid
	wire  [120:0] router_004_src_data;                                                 // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                // rsp_demux:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                              // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                        // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                          // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          niosvprocessor_dm_agent_agent_rp_valid;                              // niosvprocessor_dm_agent_agent:rp_valid -> router_005:sink_valid
	wire  [120:0] niosvprocessor_dm_agent_agent_rp_data;                               // niosvprocessor_dm_agent_agent:rp_data -> router_005:sink_data
	wire          niosvprocessor_dm_agent_agent_rp_ready;                              // router_005:sink_ready -> niosvprocessor_dm_agent_agent:rp_ready
	wire          niosvprocessor_dm_agent_agent_rp_startofpacket;                      // niosvprocessor_dm_agent_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          niosvprocessor_dm_agent_agent_rp_endofpacket;                        // niosvprocessor_dm_agent_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [120:0] router_005_src_data;                                                 // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                              // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                        // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                          // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sram_s1_agent_rp_valid;                                              // sram_s1_agent:rp_valid -> router_006:sink_valid
	wire  [120:0] sram_s1_agent_rp_data;                                               // sram_s1_agent:rp_data -> router_006:sink_data
	wire          sram_s1_agent_rp_ready;                                              // router_006:sink_ready -> sram_s1_agent:rp_ready
	wire          sram_s1_agent_rp_startofpacket;                                      // sram_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          sram_s1_agent_rp_endofpacket;                                        // sram_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [120:0] router_006_src_data;                                                 // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                // rsp_demux_002:sink_ready -> router_006:src_ready
	wire    [3:0] router_006_src_channel;                                              // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                        // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                          // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          niosvprocessor_timer_sw_agent_agent_rp_valid;                        // niosvprocessor_timer_sw_agent_agent:rp_valid -> router_007:sink_valid
	wire  [120:0] niosvprocessor_timer_sw_agent_agent_rp_data;                         // niosvprocessor_timer_sw_agent_agent:rp_data -> router_007:sink_data
	wire          niosvprocessor_timer_sw_agent_agent_rp_ready;                        // router_007:sink_ready -> niosvprocessor_timer_sw_agent_agent:rp_ready
	wire          niosvprocessor_timer_sw_agent_agent_rp_startofpacket;                // niosvprocessor_timer_sw_agent_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          niosvprocessor_timer_sw_agent_agent_rp_endofpacket;                  // niosvprocessor_timer_sw_agent_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [120:0] router_007_src_data;                                                 // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                // rsp_demux_003:sink_ready -> router_007:src_ready
	wire    [3:0] router_007_src_channel;                                              // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                        // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                          // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_002_src_valid;                                                // router_002:src_valid -> niosvprocessor_instruction_manager_wr_limiter:cmd_sink_valid
	wire  [120:0] router_002_src_data;                                                 // router_002:src_data -> niosvprocessor_instruction_manager_wr_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                // niosvprocessor_instruction_manager_wr_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                              // router_002:src_channel -> niosvprocessor_instruction_manager_wr_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                        // router_002:src_startofpacket -> niosvprocessor_instruction_manager_wr_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                          // router_002:src_endofpacket -> niosvprocessor_instruction_manager_wr_limiter:cmd_sink_endofpacket
	wire  [120:0] niosvprocessor_instruction_manager_wr_limiter_cmd_src_data;          // niosvprocessor_instruction_manager_wr_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          niosvprocessor_instruction_manager_wr_limiter_cmd_src_ready;         // cmd_demux_002:sink_ready -> niosvprocessor_instruction_manager_wr_limiter:cmd_src_ready
	wire    [3:0] niosvprocessor_instruction_manager_wr_limiter_cmd_src_channel;       // niosvprocessor_instruction_manager_wr_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          niosvprocessor_instruction_manager_wr_limiter_cmd_src_startofpacket; // niosvprocessor_instruction_manager_wr_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          niosvprocessor_instruction_manager_wr_limiter_cmd_src_endofpacket;   // niosvprocessor_instruction_manager_wr_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                               // rsp_mux_002:src_valid -> niosvprocessor_instruction_manager_wr_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_002_src_data;                                                // rsp_mux_002:src_data -> niosvprocessor_instruction_manager_wr_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                               // niosvprocessor_instruction_manager_wr_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [3:0] rsp_mux_002_src_channel;                                             // rsp_mux_002:src_channel -> niosvprocessor_instruction_manager_wr_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                       // rsp_mux_002:src_startofpacket -> niosvprocessor_instruction_manager_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                         // rsp_mux_002:src_endofpacket -> niosvprocessor_instruction_manager_wr_limiter:rsp_sink_endofpacket
	wire          niosvprocessor_instruction_manager_wr_limiter_rsp_src_valid;         // niosvprocessor_instruction_manager_wr_limiter:rsp_src_valid -> niosvprocessor_instruction_manager_agent:write_rp_valid
	wire  [120:0] niosvprocessor_instruction_manager_wr_limiter_rsp_src_data;          // niosvprocessor_instruction_manager_wr_limiter:rsp_src_data -> niosvprocessor_instruction_manager_agent:write_rp_data
	wire          niosvprocessor_instruction_manager_wr_limiter_rsp_src_ready;         // niosvprocessor_instruction_manager_agent:write_rp_ready -> niosvprocessor_instruction_manager_wr_limiter:rsp_src_ready
	wire    [3:0] niosvprocessor_instruction_manager_wr_limiter_rsp_src_channel;       // niosvprocessor_instruction_manager_wr_limiter:rsp_src_channel -> niosvprocessor_instruction_manager_agent:write_rp_channel
	wire          niosvprocessor_instruction_manager_wr_limiter_rsp_src_startofpacket; // niosvprocessor_instruction_manager_wr_limiter:rsp_src_startofpacket -> niosvprocessor_instruction_manager_agent:write_rp_startofpacket
	wire          niosvprocessor_instruction_manager_wr_limiter_rsp_src_endofpacket;   // niosvprocessor_instruction_manager_wr_limiter:rsp_src_endofpacket -> niosvprocessor_instruction_manager_agent:write_rp_endofpacket
	wire          router_003_src_valid;                                                // router_003:src_valid -> niosvprocessor_instruction_manager_rd_limiter:cmd_sink_valid
	wire  [120:0] router_003_src_data;                                                 // router_003:src_data -> niosvprocessor_instruction_manager_rd_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                // niosvprocessor_instruction_manager_rd_limiter:cmd_sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                              // router_003:src_channel -> niosvprocessor_instruction_manager_rd_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                        // router_003:src_startofpacket -> niosvprocessor_instruction_manager_rd_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                          // router_003:src_endofpacket -> niosvprocessor_instruction_manager_rd_limiter:cmd_sink_endofpacket
	wire  [120:0] niosvprocessor_instruction_manager_rd_limiter_cmd_src_data;          // niosvprocessor_instruction_manager_rd_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          niosvprocessor_instruction_manager_rd_limiter_cmd_src_ready;         // cmd_demux_003:sink_ready -> niosvprocessor_instruction_manager_rd_limiter:cmd_src_ready
	wire    [3:0] niosvprocessor_instruction_manager_rd_limiter_cmd_src_channel;       // niosvprocessor_instruction_manager_rd_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          niosvprocessor_instruction_manager_rd_limiter_cmd_src_startofpacket; // niosvprocessor_instruction_manager_rd_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          niosvprocessor_instruction_manager_rd_limiter_cmd_src_endofpacket;   // niosvprocessor_instruction_manager_rd_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                               // rsp_mux_003:src_valid -> niosvprocessor_instruction_manager_rd_limiter:rsp_sink_valid
	wire  [120:0] rsp_mux_003_src_data;                                                // rsp_mux_003:src_data -> niosvprocessor_instruction_manager_rd_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                               // niosvprocessor_instruction_manager_rd_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire    [3:0] rsp_mux_003_src_channel;                                             // rsp_mux_003:src_channel -> niosvprocessor_instruction_manager_rd_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                       // rsp_mux_003:src_startofpacket -> niosvprocessor_instruction_manager_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                         // rsp_mux_003:src_endofpacket -> niosvprocessor_instruction_manager_rd_limiter:rsp_sink_endofpacket
	wire          niosvprocessor_instruction_manager_rd_limiter_rsp_src_valid;         // niosvprocessor_instruction_manager_rd_limiter:rsp_src_valid -> niosvprocessor_instruction_manager_agent:read_rp_valid
	wire  [120:0] niosvprocessor_instruction_manager_rd_limiter_rsp_src_data;          // niosvprocessor_instruction_manager_rd_limiter:rsp_src_data -> niosvprocessor_instruction_manager_agent:read_rp_data
	wire          niosvprocessor_instruction_manager_rd_limiter_rsp_src_ready;         // niosvprocessor_instruction_manager_agent:read_rp_ready -> niosvprocessor_instruction_manager_rd_limiter:rsp_src_ready
	wire    [3:0] niosvprocessor_instruction_manager_rd_limiter_rsp_src_channel;       // niosvprocessor_instruction_manager_rd_limiter:rsp_src_channel -> niosvprocessor_instruction_manager_agent:read_rp_channel
	wire          niosvprocessor_instruction_manager_rd_limiter_rsp_src_startofpacket; // niosvprocessor_instruction_manager_rd_limiter:rsp_src_startofpacket -> niosvprocessor_instruction_manager_agent:read_rp_startofpacket
	wire          niosvprocessor_instruction_manager_rd_limiter_rsp_src_endofpacket;   // niosvprocessor_instruction_manager_rd_limiter:rsp_src_endofpacket -> niosvprocessor_instruction_manager_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                   // cmd_mux:src_valid -> jtag_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_src_data;                                                    // cmd_mux:src_data -> jtag_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                   // jtag_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                 // cmd_mux:src_channel -> jtag_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                           // cmd_mux:src_startofpacket -> jtag_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                             // cmd_mux:src_endofpacket -> jtag_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_avalon_jtag_slave_burst_adapter_source0_valid;                  // jtag_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_avalon_jtag_slave_agent:cp_valid
	wire  [120:0] jtag_avalon_jtag_slave_burst_adapter_source0_data;                   // jtag_avalon_jtag_slave_burst_adapter:source0_data -> jtag_avalon_jtag_slave_agent:cp_data
	wire          jtag_avalon_jtag_slave_burst_adapter_source0_ready;                  // jtag_avalon_jtag_slave_agent:cp_ready -> jtag_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [3:0] jtag_avalon_jtag_slave_burst_adapter_source0_channel;                // jtag_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_avalon_jtag_slave_agent:cp_channel
	wire          jtag_avalon_jtag_slave_burst_adapter_source0_startofpacket;          // jtag_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_avalon_jtag_slave_burst_adapter_source0_endofpacket;            // jtag_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                               // cmd_mux_001:src_valid -> niosvprocessor_dm_agent_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_001_src_data;                                                // cmd_mux_001:src_data -> niosvprocessor_dm_agent_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                               // niosvprocessor_dm_agent_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                             // cmd_mux_001:src_channel -> niosvprocessor_dm_agent_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                       // cmd_mux_001:src_startofpacket -> niosvprocessor_dm_agent_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                         // cmd_mux_001:src_endofpacket -> niosvprocessor_dm_agent_burst_adapter:sink0_endofpacket
	wire          niosvprocessor_dm_agent_burst_adapter_source0_valid;                 // niosvprocessor_dm_agent_burst_adapter:source0_valid -> niosvprocessor_dm_agent_agent:cp_valid
	wire  [120:0] niosvprocessor_dm_agent_burst_adapter_source0_data;                  // niosvprocessor_dm_agent_burst_adapter:source0_data -> niosvprocessor_dm_agent_agent:cp_data
	wire          niosvprocessor_dm_agent_burst_adapter_source0_ready;                 // niosvprocessor_dm_agent_agent:cp_ready -> niosvprocessor_dm_agent_burst_adapter:source0_ready
	wire    [3:0] niosvprocessor_dm_agent_burst_adapter_source0_channel;               // niosvprocessor_dm_agent_burst_adapter:source0_channel -> niosvprocessor_dm_agent_agent:cp_channel
	wire          niosvprocessor_dm_agent_burst_adapter_source0_startofpacket;         // niosvprocessor_dm_agent_burst_adapter:source0_startofpacket -> niosvprocessor_dm_agent_agent:cp_startofpacket
	wire          niosvprocessor_dm_agent_burst_adapter_source0_endofpacket;           // niosvprocessor_dm_agent_burst_adapter:source0_endofpacket -> niosvprocessor_dm_agent_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                               // cmd_mux_002:src_valid -> sram_s1_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_002_src_data;                                                // cmd_mux_002:src_data -> sram_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                               // sram_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                             // cmd_mux_002:src_channel -> sram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                       // cmd_mux_002:src_startofpacket -> sram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                         // cmd_mux_002:src_endofpacket -> sram_s1_burst_adapter:sink0_endofpacket
	wire          sram_s1_burst_adapter_source0_valid;                                 // sram_s1_burst_adapter:source0_valid -> sram_s1_agent:cp_valid
	wire  [120:0] sram_s1_burst_adapter_source0_data;                                  // sram_s1_burst_adapter:source0_data -> sram_s1_agent:cp_data
	wire          sram_s1_burst_adapter_source0_ready;                                 // sram_s1_agent:cp_ready -> sram_s1_burst_adapter:source0_ready
	wire    [3:0] sram_s1_burst_adapter_source0_channel;                               // sram_s1_burst_adapter:source0_channel -> sram_s1_agent:cp_channel
	wire          sram_s1_burst_adapter_source0_startofpacket;                         // sram_s1_burst_adapter:source0_startofpacket -> sram_s1_agent:cp_startofpacket
	wire          sram_s1_burst_adapter_source0_endofpacket;                           // sram_s1_burst_adapter:source0_endofpacket -> sram_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                               // cmd_mux_003:src_valid -> niosvprocessor_timer_sw_agent_burst_adapter:sink0_valid
	wire  [120:0] cmd_mux_003_src_data;                                                // cmd_mux_003:src_data -> niosvprocessor_timer_sw_agent_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                               // niosvprocessor_timer_sw_agent_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                             // cmd_mux_003:src_channel -> niosvprocessor_timer_sw_agent_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                       // cmd_mux_003:src_startofpacket -> niosvprocessor_timer_sw_agent_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                         // cmd_mux_003:src_endofpacket -> niosvprocessor_timer_sw_agent_burst_adapter:sink0_endofpacket
	wire          niosvprocessor_timer_sw_agent_burst_adapter_source0_valid;           // niosvprocessor_timer_sw_agent_burst_adapter:source0_valid -> niosvprocessor_timer_sw_agent_agent:cp_valid
	wire  [120:0] niosvprocessor_timer_sw_agent_burst_adapter_source0_data;            // niosvprocessor_timer_sw_agent_burst_adapter:source0_data -> niosvprocessor_timer_sw_agent_agent:cp_data
	wire          niosvprocessor_timer_sw_agent_burst_adapter_source0_ready;           // niosvprocessor_timer_sw_agent_agent:cp_ready -> niosvprocessor_timer_sw_agent_burst_adapter:source0_ready
	wire    [3:0] niosvprocessor_timer_sw_agent_burst_adapter_source0_channel;         // niosvprocessor_timer_sw_agent_burst_adapter:source0_channel -> niosvprocessor_timer_sw_agent_agent:cp_channel
	wire          niosvprocessor_timer_sw_agent_burst_adapter_source0_startofpacket;   // niosvprocessor_timer_sw_agent_burst_adapter:source0_startofpacket -> niosvprocessor_timer_sw_agent_agent:cp_startofpacket
	wire          niosvprocessor_timer_sw_agent_burst_adapter_source0_endofpacket;     // niosvprocessor_timer_sw_agent_burst_adapter:source0_endofpacket -> niosvprocessor_timer_sw_agent_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [120:0] cmd_demux_src0_data;                                                 // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                              // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                        // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                          // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [120:0] cmd_demux_src1_data;                                                 // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                              // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                        // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                          // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [120:0] cmd_demux_src2_data;                                                 // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                              // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                        // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                          // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [120:0] cmd_demux_src3_data;                                                 // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                              // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                        // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                          // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                            // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [120:0] cmd_demux_001_src0_data;                                             // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                            // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                          // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                    // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                      // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                            // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [120:0] cmd_demux_001_src1_data;                                             // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                            // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                          // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                    // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                      // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                            // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [120:0] cmd_demux_001_src2_data;                                             // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                            // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [3:0] cmd_demux_001_src2_channel;                                          // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                    // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                      // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                            // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [120:0] cmd_demux_001_src3_data;                                             // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                            // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [3:0] cmd_demux_001_src3_channel;                                          // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                    // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                      // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                            // cmd_demux_002:src0_valid -> cmd_mux_001:sink2_valid
	wire  [120:0] cmd_demux_002_src0_data;                                             // cmd_demux_002:src0_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_002_src0_ready;                                            // cmd_mux_001:sink2_ready -> cmd_demux_002:src0_ready
	wire    [3:0] cmd_demux_002_src0_channel;                                          // cmd_demux_002:src0_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                    // cmd_demux_002:src0_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                      // cmd_demux_002:src0_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                            // cmd_demux_002:src1_valid -> cmd_mux_002:sink2_valid
	wire  [120:0] cmd_demux_002_src1_data;                                             // cmd_demux_002:src1_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src1_ready;                                            // cmd_mux_002:sink2_ready -> cmd_demux_002:src1_ready
	wire    [3:0] cmd_demux_002_src1_channel;                                          // cmd_demux_002:src1_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                    // cmd_demux_002:src1_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                      // cmd_demux_002:src1_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                            // cmd_demux_003:src0_valid -> cmd_mux_001:sink3_valid
	wire  [120:0] cmd_demux_003_src0_data;                                             // cmd_demux_003:src0_data -> cmd_mux_001:sink3_data
	wire          cmd_demux_003_src0_ready;                                            // cmd_mux_001:sink3_ready -> cmd_demux_003:src0_ready
	wire    [3:0] cmd_demux_003_src0_channel;                                          // cmd_demux_003:src0_channel -> cmd_mux_001:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                    // cmd_demux_003:src0_startofpacket -> cmd_mux_001:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                      // cmd_demux_003:src0_endofpacket -> cmd_mux_001:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                            // cmd_demux_003:src1_valid -> cmd_mux_002:sink3_valid
	wire  [120:0] cmd_demux_003_src1_data;                                             // cmd_demux_003:src1_data -> cmd_mux_002:sink3_data
	wire          cmd_demux_003_src1_ready;                                            // cmd_mux_002:sink3_ready -> cmd_demux_003:src1_ready
	wire    [3:0] cmd_demux_003_src1_channel;                                          // cmd_demux_003:src1_channel -> cmd_mux_002:sink3_channel
	wire          cmd_demux_003_src1_startofpacket;                                    // cmd_demux_003:src1_startofpacket -> cmd_mux_002:sink3_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                      // cmd_demux_003:src1_endofpacket -> cmd_mux_002:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [120:0] rsp_demux_src0_data;                                                 // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                              // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                        // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                          // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [120:0] rsp_demux_src1_data;                                                 // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                              // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                        // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                          // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                            // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [120:0] rsp_demux_001_src0_data;                                             // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                            // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                          // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                    // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                      // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                            // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [120:0] rsp_demux_001_src1_data;                                             // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                            // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [3:0] rsp_demux_001_src1_channel;                                          // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                    // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                      // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                            // rsp_demux_001:src2_valid -> rsp_mux_002:sink0_valid
	wire  [120:0] rsp_demux_001_src2_data;                                             // rsp_demux_001:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_001_src2_ready;                                            // rsp_mux_002:sink0_ready -> rsp_demux_001:src2_ready
	wire    [3:0] rsp_demux_001_src2_channel;                                          // rsp_demux_001:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_001_src2_startofpacket;                                    // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                      // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src3_valid;                                            // rsp_demux_001:src3_valid -> rsp_mux_003:sink0_valid
	wire  [120:0] rsp_demux_001_src3_data;                                             // rsp_demux_001:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_001_src3_ready;                                            // rsp_mux_003:sink0_ready -> rsp_demux_001:src3_ready
	wire    [3:0] rsp_demux_001_src3_channel;                                          // rsp_demux_001:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_001_src3_startofpacket;                                    // rsp_demux_001:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_001_src3_endofpacket;                                      // rsp_demux_001:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                            // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [120:0] rsp_demux_002_src0_data;                                             // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                            // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                          // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                    // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                      // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                            // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [120:0] rsp_demux_002_src1_data;                                             // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                            // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [3:0] rsp_demux_002_src1_channel;                                          // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                    // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                      // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src2_valid;                                            // rsp_demux_002:src2_valid -> rsp_mux_002:sink1_valid
	wire  [120:0] rsp_demux_002_src2_data;                                             // rsp_demux_002:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_002_src2_ready;                                            // rsp_mux_002:sink1_ready -> rsp_demux_002:src2_ready
	wire    [3:0] rsp_demux_002_src2_channel;                                          // rsp_demux_002:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_002_src2_startofpacket;                                    // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                      // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src3_valid;                                            // rsp_demux_002:src3_valid -> rsp_mux_003:sink1_valid
	wire  [120:0] rsp_demux_002_src3_data;                                             // rsp_demux_002:src3_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_002_src3_ready;                                            // rsp_mux_003:sink1_ready -> rsp_demux_002:src3_ready
	wire    [3:0] rsp_demux_002_src3_channel;                                          // rsp_demux_002:src3_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_002_src3_startofpacket;                                    // rsp_demux_002:src3_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_002_src3_endofpacket;                                      // rsp_demux_002:src3_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                            // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [120:0] rsp_demux_003_src0_data;                                             // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                            // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                          // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                    // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                      // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                            // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [120:0] rsp_demux_003_src1_data;                                             // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                            // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [3:0] rsp_demux_003_src1_channel;                                          // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                    // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                      // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire    [3:0] niosvprocessor_instruction_manager_wr_limiter_cmd_valid_data;        // niosvprocessor_instruction_manager_wr_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire    [3:0] niosvprocessor_instruction_manager_rd_limiter_cmd_valid_data;        // niosvprocessor_instruction_manager_rd_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_out_valid;                   // jtag_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_avalon_jtag_slave_agent_rdata_fifo_out_data;                    // jtag_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_out_ready;                   // avalon_st_adapter:in_0_ready -> jtag_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                       // avalon_st_adapter:out_0_valid -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                        // avalon_st_adapter:out_0_data -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                       // jtag_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                       // avalon_st_adapter:out_0_error -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          niosvprocessor_dm_agent_agent_rdata_fifo_out_valid;                  // niosvprocessor_dm_agent_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] niosvprocessor_dm_agent_agent_rdata_fifo_out_data;                   // niosvprocessor_dm_agent_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          niosvprocessor_dm_agent_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_001:in_0_ready -> niosvprocessor_dm_agent_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                   // avalon_st_adapter_001:out_0_valid -> niosvprocessor_dm_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                    // avalon_st_adapter_001:out_0_data -> niosvprocessor_dm_agent_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                   // niosvprocessor_dm_agent_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                   // avalon_st_adapter_001:out_0_error -> niosvprocessor_dm_agent_agent:rdata_fifo_sink_error
	wire          sram_s1_agent_rdata_fifo_out_valid;                                  // sram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sram_s1_agent_rdata_fifo_out_data;                                   // sram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          sram_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_002:in_0_ready -> sram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                   // avalon_st_adapter_002:out_0_valid -> sram_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                    // avalon_st_adapter_002:out_0_data -> sram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                   // sram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                   // avalon_st_adapter_002:out_0_error -> sram_s1_agent:rdata_fifo_sink_error
	wire          niosvprocessor_timer_sw_agent_agent_rdata_fifo_out_valid;            // niosvprocessor_timer_sw_agent_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] niosvprocessor_timer_sw_agent_agent_rdata_fifo_out_data;             // niosvprocessor_timer_sw_agent_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          niosvprocessor_timer_sw_agent_agent_rdata_fifo_out_ready;            // avalon_st_adapter_003:in_0_ready -> niosvprocessor_timer_sw_agent_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                   // avalon_st_adapter_003:out_0_valid -> niosvprocessor_timer_sw_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                    // avalon_st_adapter_003:out_0_data -> niosvprocessor_timer_sw_agent_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                   // niosvprocessor_timer_sw_agent_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                   // avalon_st_adapter_003:out_0_error -> niosvprocessor_timer_sw_agent_agent:rdata_fifo_sink_error

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (0),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (0),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (0),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (0),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4")
	) niosvprocessor_data_manager_translator (
		.aclk        (clk_0_clk_clk),                                      //       clk.clk
		.aresetn     (~niosvprocessor_reset_reset_bridge_in_reset_reset),  // clk_reset.reset_n
		.m0_awid     (niosvprocessor_data_manager_translator_m0_awid),     //        m0.awid
		.m0_awaddr   (niosvprocessor_data_manager_translator_m0_awaddr),   //          .awaddr
		.m0_awlen    (niosvprocessor_data_manager_translator_m0_awlen),    //          .awlen
		.m0_awsize   (niosvprocessor_data_manager_translator_m0_awsize),   //          .awsize
		.m0_awburst  (niosvprocessor_data_manager_translator_m0_awburst),  //          .awburst
		.m0_awlock   (niosvprocessor_data_manager_translator_m0_awlock),   //          .awlock
		.m0_awcache  (niosvprocessor_data_manager_translator_m0_awcache),  //          .awcache
		.m0_awprot   (niosvprocessor_data_manager_translator_m0_awprot),   //          .awprot
		.m0_awuser   (niosvprocessor_data_manager_translator_m0_awuser),   //          .awuser
		.m0_awqos    (niosvprocessor_data_manager_translator_m0_awqos),    //          .awqos
		.m0_awregion (niosvprocessor_data_manager_translator_m0_awregion), //          .awregion
		.m0_awvalid  (niosvprocessor_data_manager_translator_m0_awvalid),  //          .awvalid
		.m0_awready  (niosvprocessor_data_manager_translator_m0_awready),  //          .awready
		.m0_wdata    (niosvprocessor_data_manager_translator_m0_wdata),    //          .wdata
		.m0_wstrb    (niosvprocessor_data_manager_translator_m0_wstrb),    //          .wstrb
		.m0_wlast    (niosvprocessor_data_manager_translator_m0_wlast),    //          .wlast
		.m0_wvalid   (niosvprocessor_data_manager_translator_m0_wvalid),   //          .wvalid
		.m0_wuser    (niosvprocessor_data_manager_translator_m0_wuser),    //          .wuser
		.m0_wready   (niosvprocessor_data_manager_translator_m0_wready),   //          .wready
		.m0_bid      (niosvprocessor_data_manager_translator_m0_bid),      //          .bid
		.m0_bresp    (niosvprocessor_data_manager_translator_m0_bresp),    //          .bresp
		.m0_buser    (niosvprocessor_data_manager_translator_m0_buser),    //          .buser
		.m0_bvalid   (niosvprocessor_data_manager_translator_m0_bvalid),   //          .bvalid
		.m0_bready   (niosvprocessor_data_manager_translator_m0_bready),   //          .bready
		.m0_arid     (niosvprocessor_data_manager_translator_m0_arid),     //          .arid
		.m0_araddr   (niosvprocessor_data_manager_translator_m0_araddr),   //          .araddr
		.m0_arlen    (niosvprocessor_data_manager_translator_m0_arlen),    //          .arlen
		.m0_arsize   (niosvprocessor_data_manager_translator_m0_arsize),   //          .arsize
		.m0_arburst  (niosvprocessor_data_manager_translator_m0_arburst),  //          .arburst
		.m0_arlock   (niosvprocessor_data_manager_translator_m0_arlock),   //          .arlock
		.m0_arcache  (niosvprocessor_data_manager_translator_m0_arcache),  //          .arcache
		.m0_arprot   (niosvprocessor_data_manager_translator_m0_arprot),   //          .arprot
		.m0_aruser   (niosvprocessor_data_manager_translator_m0_aruser),   //          .aruser
		.m0_arqos    (niosvprocessor_data_manager_translator_m0_arqos),    //          .arqos
		.m0_arregion (niosvprocessor_data_manager_translator_m0_arregion), //          .arregion
		.m0_arvalid  (niosvprocessor_data_manager_translator_m0_arvalid),  //          .arvalid
		.m0_arready  (niosvprocessor_data_manager_translator_m0_arready),  //          .arready
		.m0_rid      (niosvprocessor_data_manager_translator_m0_rid),      //          .rid
		.m0_rdata    (niosvprocessor_data_manager_translator_m0_rdata),    //          .rdata
		.m0_rresp    (niosvprocessor_data_manager_translator_m0_rresp),    //          .rresp
		.m0_rlast    (niosvprocessor_data_manager_translator_m0_rlast),    //          .rlast
		.m0_rvalid   (niosvprocessor_data_manager_translator_m0_rvalid),   //          .rvalid
		.m0_rready   (niosvprocessor_data_manager_translator_m0_rready),   //          .rready
		.m0_ruser    (niosvprocessor_data_manager_translator_m0_ruser),    //          .ruser
		.s0_awaddr   (niosvprocessor_data_manager_awaddr),                 //        s0.awaddr
		.s0_awlen    (niosvprocessor_data_manager_awlen),                  //          .awlen
		.s0_awsize   (niosvprocessor_data_manager_awsize),                 //          .awsize
		.s0_awprot   (niosvprocessor_data_manager_awprot),                 //          .awprot
		.s0_awvalid  (niosvprocessor_data_manager_awvalid),                //          .awvalid
		.s0_awready  (niosvprocessor_data_manager_awready),                //          .awready
		.s0_wdata    (niosvprocessor_data_manager_wdata),                  //          .wdata
		.s0_wstrb    (niosvprocessor_data_manager_wstrb),                  //          .wstrb
		.s0_wlast    (niosvprocessor_data_manager_wlast),                  //          .wlast
		.s0_wvalid   (niosvprocessor_data_manager_wvalid),                 //          .wvalid
		.s0_wready   (niosvprocessor_data_manager_wready),                 //          .wready
		.s0_bresp    (niosvprocessor_data_manager_bresp),                  //          .bresp
		.s0_bvalid   (niosvprocessor_data_manager_bvalid),                 //          .bvalid
		.s0_bready   (niosvprocessor_data_manager_bready),                 //          .bready
		.s0_araddr   (niosvprocessor_data_manager_araddr),                 //          .araddr
		.s0_arlen    (niosvprocessor_data_manager_arlen),                  //          .arlen
		.s0_arsize   (niosvprocessor_data_manager_arsize),                 //          .arsize
		.s0_arprot   (niosvprocessor_data_manager_arprot),                 //          .arprot
		.s0_arvalid  (niosvprocessor_data_manager_arvalid),                //          .arvalid
		.s0_arready  (niosvprocessor_data_manager_arready),                //          .arready
		.s0_rdata    (niosvprocessor_data_manager_rdata),                  //          .rdata
		.s0_rresp    (niosvprocessor_data_manager_rresp),                  //          .rresp
		.s0_rlast    (niosvprocessor_data_manager_rlast),                  //          .rlast
		.s0_rvalid   (niosvprocessor_data_manager_rvalid),                 //          .rvalid
		.s0_rready   (niosvprocessor_data_manager_rready),                 //          .rready
		.s0_awid     (1'b0),                                               // (terminated)
		.s0_awburst  (2'b00),                                              // (terminated)
		.s0_awlock   (1'b0),                                               // (terminated)
		.s0_awcache  (4'b0000),                                            // (terminated)
		.s0_awuser   (1'b0),                                               // (terminated)
		.s0_awqos    (4'b0000),                                            // (terminated)
		.s0_awregion (4'b0000),                                            // (terminated)
		.s0_wuser    (1'b0),                                               // (terminated)
		.s0_bid      (),                                                   // (terminated)
		.s0_buser    (),                                                   // (terminated)
		.s0_arid     (1'b0),                                               // (terminated)
		.s0_arburst  (2'b00),                                              // (terminated)
		.s0_arlock   (1'b0),                                               // (terminated)
		.s0_arcache  (4'b0000),                                            // (terminated)
		.s0_aruser   (1'b0),                                               // (terminated)
		.s0_arqos    (4'b0000),                                            // (terminated)
		.s0_arregion (4'b0000),                                            // (terminated)
		.s0_rid      (),                                                   // (terminated)
		.s0_ruser    (),                                                   // (terminated)
		.s0_wid      (1'b0),                                               // (terminated)
		.m0_wid      ()                                                    // (terminated)
	);

	altera_merlin_axi_translator #(
		.USE_S0_AWID                       (0),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (0),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (0),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (0),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (0),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (0),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (0),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (0),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (1),
		.DATA_WIDTH                        (32),
		.S0_ID_WIDTH                       (1),
		.M0_ADDR_WIDTH                     (32),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (32),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4")
	) niosvprocessor_instruction_manager_translator (
		.aclk        (clk_0_clk_clk),                                             //       clk.clk
		.aresetn     (~niosvprocessor_reset_reset_bridge_in_reset_reset),         // clk_reset.reset_n
		.m0_awid     (niosvprocessor_instruction_manager_translator_m0_awid),     //        m0.awid
		.m0_awaddr   (niosvprocessor_instruction_manager_translator_m0_awaddr),   //          .awaddr
		.m0_awlen    (niosvprocessor_instruction_manager_translator_m0_awlen),    //          .awlen
		.m0_awsize   (niosvprocessor_instruction_manager_translator_m0_awsize),   //          .awsize
		.m0_awburst  (niosvprocessor_instruction_manager_translator_m0_awburst),  //          .awburst
		.m0_awlock   (niosvprocessor_instruction_manager_translator_m0_awlock),   //          .awlock
		.m0_awcache  (niosvprocessor_instruction_manager_translator_m0_awcache),  //          .awcache
		.m0_awprot   (niosvprocessor_instruction_manager_translator_m0_awprot),   //          .awprot
		.m0_awuser   (niosvprocessor_instruction_manager_translator_m0_awuser),   //          .awuser
		.m0_awqos    (niosvprocessor_instruction_manager_translator_m0_awqos),    //          .awqos
		.m0_awregion (niosvprocessor_instruction_manager_translator_m0_awregion), //          .awregion
		.m0_awvalid  (niosvprocessor_instruction_manager_translator_m0_awvalid),  //          .awvalid
		.m0_awready  (niosvprocessor_instruction_manager_translator_m0_awready),  //          .awready
		.m0_wdata    (niosvprocessor_instruction_manager_translator_m0_wdata),    //          .wdata
		.m0_wstrb    (niosvprocessor_instruction_manager_translator_m0_wstrb),    //          .wstrb
		.m0_wlast    (niosvprocessor_instruction_manager_translator_m0_wlast),    //          .wlast
		.m0_wvalid   (niosvprocessor_instruction_manager_translator_m0_wvalid),   //          .wvalid
		.m0_wuser    (niosvprocessor_instruction_manager_translator_m0_wuser),    //          .wuser
		.m0_wready   (niosvprocessor_instruction_manager_translator_m0_wready),   //          .wready
		.m0_bid      (niosvprocessor_instruction_manager_translator_m0_bid),      //          .bid
		.m0_bresp    (niosvprocessor_instruction_manager_translator_m0_bresp),    //          .bresp
		.m0_buser    (niosvprocessor_instruction_manager_translator_m0_buser),    //          .buser
		.m0_bvalid   (niosvprocessor_instruction_manager_translator_m0_bvalid),   //          .bvalid
		.m0_bready   (niosvprocessor_instruction_manager_translator_m0_bready),   //          .bready
		.m0_arid     (niosvprocessor_instruction_manager_translator_m0_arid),     //          .arid
		.m0_araddr   (niosvprocessor_instruction_manager_translator_m0_araddr),   //          .araddr
		.m0_arlen    (niosvprocessor_instruction_manager_translator_m0_arlen),    //          .arlen
		.m0_arsize   (niosvprocessor_instruction_manager_translator_m0_arsize),   //          .arsize
		.m0_arburst  (niosvprocessor_instruction_manager_translator_m0_arburst),  //          .arburst
		.m0_arlock   (niosvprocessor_instruction_manager_translator_m0_arlock),   //          .arlock
		.m0_arcache  (niosvprocessor_instruction_manager_translator_m0_arcache),  //          .arcache
		.m0_arprot   (niosvprocessor_instruction_manager_translator_m0_arprot),   //          .arprot
		.m0_aruser   (niosvprocessor_instruction_manager_translator_m0_aruser),   //          .aruser
		.m0_arqos    (niosvprocessor_instruction_manager_translator_m0_arqos),    //          .arqos
		.m0_arregion (niosvprocessor_instruction_manager_translator_m0_arregion), //          .arregion
		.m0_arvalid  (niosvprocessor_instruction_manager_translator_m0_arvalid),  //          .arvalid
		.m0_arready  (niosvprocessor_instruction_manager_translator_m0_arready),  //          .arready
		.m0_rid      (niosvprocessor_instruction_manager_translator_m0_rid),      //          .rid
		.m0_rdata    (niosvprocessor_instruction_manager_translator_m0_rdata),    //          .rdata
		.m0_rresp    (niosvprocessor_instruction_manager_translator_m0_rresp),    //          .rresp
		.m0_rlast    (niosvprocessor_instruction_manager_translator_m0_rlast),    //          .rlast
		.m0_rvalid   (niosvprocessor_instruction_manager_translator_m0_rvalid),   //          .rvalid
		.m0_rready   (niosvprocessor_instruction_manager_translator_m0_rready),   //          .rready
		.m0_ruser    (niosvprocessor_instruction_manager_translator_m0_ruser),    //          .ruser
		.s0_awaddr   (niosvprocessor_instruction_manager_awaddr),                 //        s0.awaddr
		.s0_awlen    (niosvprocessor_instruction_manager_awlen),                  //          .awlen
		.s0_awsize   (niosvprocessor_instruction_manager_awsize),                 //          .awsize
		.s0_awburst  (niosvprocessor_instruction_manager_awburst),                //          .awburst
		.s0_awprot   (niosvprocessor_instruction_manager_awprot),                 //          .awprot
		.s0_awvalid  (niosvprocessor_instruction_manager_awvalid),                //          .awvalid
		.s0_awready  (niosvprocessor_instruction_manager_awready),                //          .awready
		.s0_wdata    (niosvprocessor_instruction_manager_wdata),                  //          .wdata
		.s0_wstrb    (niosvprocessor_instruction_manager_wstrb),                  //          .wstrb
		.s0_wlast    (niosvprocessor_instruction_manager_wlast),                  //          .wlast
		.s0_wvalid   (niosvprocessor_instruction_manager_wvalid),                 //          .wvalid
		.s0_wready   (niosvprocessor_instruction_manager_wready),                 //          .wready
		.s0_bresp    (niosvprocessor_instruction_manager_bresp),                  //          .bresp
		.s0_bvalid   (niosvprocessor_instruction_manager_bvalid),                 //          .bvalid
		.s0_bready   (niosvprocessor_instruction_manager_bready),                 //          .bready
		.s0_araddr   (niosvprocessor_instruction_manager_araddr),                 //          .araddr
		.s0_arlen    (niosvprocessor_instruction_manager_arlen),                  //          .arlen
		.s0_arsize   (niosvprocessor_instruction_manager_arsize),                 //          .arsize
		.s0_arburst  (niosvprocessor_instruction_manager_arburst),                //          .arburst
		.s0_arprot   (niosvprocessor_instruction_manager_arprot),                 //          .arprot
		.s0_arvalid  (niosvprocessor_instruction_manager_arvalid),                //          .arvalid
		.s0_arready  (niosvprocessor_instruction_manager_arready),                //          .arready
		.s0_rdata    (niosvprocessor_instruction_manager_rdata),                  //          .rdata
		.s0_rresp    (niosvprocessor_instruction_manager_rresp),                  //          .rresp
		.s0_rlast    (niosvprocessor_instruction_manager_rlast),                  //          .rlast
		.s0_rvalid   (niosvprocessor_instruction_manager_rvalid),                 //          .rvalid
		.s0_rready   (niosvprocessor_instruction_manager_rready),                 //          .rready
		.s0_awid     (1'b0),                                                      // (terminated)
		.s0_awlock   (1'b0),                                                      // (terminated)
		.s0_awcache  (4'b0000),                                                   // (terminated)
		.s0_awuser   (1'b0),                                                      // (terminated)
		.s0_awqos    (4'b0000),                                                   // (terminated)
		.s0_awregion (4'b0000),                                                   // (terminated)
		.s0_wuser    (1'b0),                                                      // (terminated)
		.s0_bid      (),                                                          // (terminated)
		.s0_buser    (),                                                          // (terminated)
		.s0_arid     (1'b0),                                                      // (terminated)
		.s0_arlock   (1'b0),                                                      // (terminated)
		.s0_arcache  (4'b0000),                                                   // (terminated)
		.s0_aruser   (1'b0),                                                      // (terminated)
		.s0_arqos    (4'b0000),                                                   // (terminated)
		.s0_arregion (4'b0000),                                                   // (terminated)
		.s0_rid      (),                                                          // (terminated)
		.s0_ruser    (),                                                          // (terminated)
		.s0_wid      (1'b0),                                                      // (terminated)
		.m0_wid      ()                                                           // (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (niosvprocessor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_avalon_jtag_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_avalon_jtag_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (jtag_avalon_jtag_slave_agent_m0_read),             //                         .read
		.uav_write              (jtag_avalon_jtag_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (jtag_avalon_jtag_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (jtag_avalon_jtag_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (jtag_avalon_jtag_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (jtag_avalon_jtag_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (jtag_avalon_jtag_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (jtag_avalon_jtag_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (jtag_avalon_jtag_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (jtag_avalon_jtag_slave_address),                   //      avalon_anti_slave_0.address
		.av_write               (jtag_avalon_jtag_slave_write),                     //                         .write
		.av_read                (jtag_avalon_jtag_slave_read),                      //                         .read
		.av_readdata            (jtag_avalon_jtag_slave_readdata),                  //                         .readdata
		.av_writedata           (jtag_avalon_jtag_slave_writedata),                 //                         .writedata
		.av_waitrequest         (jtag_avalon_jtag_slave_waitrequest),               //                         .waitrequest
		.av_chipselect          (jtag_avalon_jtag_slave_chipselect),                //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) niosvprocessor_dm_agent_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (niosvprocessor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (niosvprocessor_dm_agent_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (niosvprocessor_dm_agent_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (niosvprocessor_dm_agent_agent_m0_read),            //                         .read
		.uav_write              (niosvprocessor_dm_agent_agent_m0_write),           //                         .write
		.uav_waitrequest        (niosvprocessor_dm_agent_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (niosvprocessor_dm_agent_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (niosvprocessor_dm_agent_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (niosvprocessor_dm_agent_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (niosvprocessor_dm_agent_agent_m0_writedata),       //                         .writedata
		.uav_lock               (niosvprocessor_dm_agent_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (niosvprocessor_dm_agent_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (niosvprocessor_dm_agent_address),                  //      avalon_anti_slave_0.address
		.av_write               (niosvprocessor_dm_agent_write),                    //                         .write
		.av_read                (niosvprocessor_dm_agent_read),                     //                         .read
		.av_readdata            (niosvprocessor_dm_agent_readdata),                 //                         .readdata
		.av_writedata           (niosvprocessor_dm_agent_writedata),                //                         .writedata
		.av_readdatavalid       (niosvprocessor_dm_agent_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (niosvprocessor_dm_agent_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (17),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (niosvprocessor_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (sram_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (sram_s1_agent_m0_read),                            //                         .read
		.uav_write              (sram_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (sram_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (sram_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (sram_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (sram_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (sram_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (sram_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (sram_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (sram_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (sram_s1_write),                                    //                         .write
		.av_readdata            (sram_s1_readdata),                                 //                         .readdata
		.av_writedata           (sram_s1_writedata),                                //                         .writedata
		.av_byteenable          (sram_s1_byteenable),                               //                         .byteenable
		.av_chipselect          (sram_s1_chipselect),                               //                         .chipselect
		.av_clken               (sram_s1_clken),                                    //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) niosvprocessor_timer_sw_agent_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (niosvprocessor_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (niosvprocessor_timer_sw_agent_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (niosvprocessor_timer_sw_agent_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (niosvprocessor_timer_sw_agent_agent_m0_read),          //                         .read
		.uav_write              (niosvprocessor_timer_sw_agent_agent_m0_write),         //                         .write
		.uav_waitrequest        (niosvprocessor_timer_sw_agent_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (niosvprocessor_timer_sw_agent_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (niosvprocessor_timer_sw_agent_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (niosvprocessor_timer_sw_agent_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (niosvprocessor_timer_sw_agent_agent_m0_writedata),     //                         .writedata
		.uav_lock               (niosvprocessor_timer_sw_agent_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (niosvprocessor_timer_sw_agent_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (niosvprocessor_timer_sw_agent_address),                //      avalon_anti_slave_0.address
		.av_write               (niosvprocessor_timer_sw_agent_write),                  //                         .write
		.av_read                (niosvprocessor_timer_sw_agent_read),                   //                         .read
		.av_readdata            (niosvprocessor_timer_sw_agent_readdata),               //                         .readdata
		.av_writedata           (niosvprocessor_timer_sw_agent_writedata),              //                         .writedata
		.av_byteenable          (niosvprocessor_timer_sw_agent_byteenable),             //                         .byteenable
		.av_readdatavalid       (niosvprocessor_timer_sw_agent_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (niosvprocessor_timer_sw_agent_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (103),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (4),
		.ID                        (0)
	) niosvprocessor_data_manager_agent (
		.aclk                   (clk_0_clk_clk),                                            //              clk.clk
		.aresetn                (~niosvprocessor_reset_reset_bridge_in_reset_reset),        //        clk_reset.reset_n
		.write_cp_valid         (niosvprocessor_data_manager_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (niosvprocessor_data_manager_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (niosvprocessor_data_manager_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (niosvprocessor_data_manager_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (niosvprocessor_data_manager_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                        //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                         //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                      //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                  //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                        //                 .ready
		.read_cp_valid          (niosvprocessor_data_manager_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (niosvprocessor_data_manager_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (niosvprocessor_data_manager_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (niosvprocessor_data_manager_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (niosvprocessor_data_manager_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                    //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                     //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                  //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                            //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                              //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                    //                 .ready
		.awid                   (niosvprocessor_data_manager_translator_m0_awid),           // altera_axi_slave.awid
		.awaddr                 (niosvprocessor_data_manager_translator_m0_awaddr),         //                 .awaddr
		.awlen                  (niosvprocessor_data_manager_translator_m0_awlen),          //                 .awlen
		.awsize                 (niosvprocessor_data_manager_translator_m0_awsize),         //                 .awsize
		.awburst                (niosvprocessor_data_manager_translator_m0_awburst),        //                 .awburst
		.awlock                 (niosvprocessor_data_manager_translator_m0_awlock),         //                 .awlock
		.awcache                (niosvprocessor_data_manager_translator_m0_awcache),        //                 .awcache
		.awprot                 (niosvprocessor_data_manager_translator_m0_awprot),         //                 .awprot
		.awuser                 (niosvprocessor_data_manager_translator_m0_awuser),         //                 .awuser
		.awqos                  (niosvprocessor_data_manager_translator_m0_awqos),          //                 .awqos
		.awregion               (niosvprocessor_data_manager_translator_m0_awregion),       //                 .awregion
		.awvalid                (niosvprocessor_data_manager_translator_m0_awvalid),        //                 .awvalid
		.awready                (niosvprocessor_data_manager_translator_m0_awready),        //                 .awready
		.wdata                  (niosvprocessor_data_manager_translator_m0_wdata),          //                 .wdata
		.wstrb                  (niosvprocessor_data_manager_translator_m0_wstrb),          //                 .wstrb
		.wlast                  (niosvprocessor_data_manager_translator_m0_wlast),          //                 .wlast
		.wvalid                 (niosvprocessor_data_manager_translator_m0_wvalid),         //                 .wvalid
		.wuser                  (niosvprocessor_data_manager_translator_m0_wuser),          //                 .wuser
		.wready                 (niosvprocessor_data_manager_translator_m0_wready),         //                 .wready
		.bid                    (niosvprocessor_data_manager_translator_m0_bid),            //                 .bid
		.bresp                  (niosvprocessor_data_manager_translator_m0_bresp),          //                 .bresp
		.buser                  (niosvprocessor_data_manager_translator_m0_buser),          //                 .buser
		.bvalid                 (niosvprocessor_data_manager_translator_m0_bvalid),         //                 .bvalid
		.bready                 (niosvprocessor_data_manager_translator_m0_bready),         //                 .bready
		.arid                   (niosvprocessor_data_manager_translator_m0_arid),           //                 .arid
		.araddr                 (niosvprocessor_data_manager_translator_m0_araddr),         //                 .araddr
		.arlen                  (niosvprocessor_data_manager_translator_m0_arlen),          //                 .arlen
		.arsize                 (niosvprocessor_data_manager_translator_m0_arsize),         //                 .arsize
		.arburst                (niosvprocessor_data_manager_translator_m0_arburst),        //                 .arburst
		.arlock                 (niosvprocessor_data_manager_translator_m0_arlock),         //                 .arlock
		.arcache                (niosvprocessor_data_manager_translator_m0_arcache),        //                 .arcache
		.arprot                 (niosvprocessor_data_manager_translator_m0_arprot),         //                 .arprot
		.aruser                 (niosvprocessor_data_manager_translator_m0_aruser),         //                 .aruser
		.arqos                  (niosvprocessor_data_manager_translator_m0_arqos),          //                 .arqos
		.arregion               (niosvprocessor_data_manager_translator_m0_arregion),       //                 .arregion
		.arvalid                (niosvprocessor_data_manager_translator_m0_arvalid),        //                 .arvalid
		.arready                (niosvprocessor_data_manager_translator_m0_arready),        //                 .arready
		.rid                    (niosvprocessor_data_manager_translator_m0_rid),            //                 .rid
		.rdata                  (niosvprocessor_data_manager_translator_m0_rdata),          //                 .rdata
		.rresp                  (niosvprocessor_data_manager_translator_m0_rresp),          //                 .rresp
		.rlast                  (niosvprocessor_data_manager_translator_m0_rlast),          //                 .rlast
		.rvalid                 (niosvprocessor_data_manager_translator_m0_rvalid),         //                 .rvalid
		.rready                 (niosvprocessor_data_manager_translator_m0_rready),         //                 .rready
		.ruser                  (niosvprocessor_data_manager_translator_m0_ruser),          //                 .ruser
		.wid                    (1'b0)                                                      //      (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.AXI_VERSION               ("AXI4"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (115),
		.PKT_CACHE_L               (112),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_THREAD_ID_H           (108),
		.PKT_THREAD_ID_L           (108),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (103),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (4),
		.ID                        (1)
	) niosvprocessor_instruction_manager_agent (
		.aclk                   (clk_0_clk_clk),                                                       //              clk.clk
		.aresetn                (~niosvprocessor_reset_reset_bridge_in_reset_reset),                   //        clk_reset.reset_n
		.write_cp_valid         (niosvprocessor_instruction_manager_agent_write_cp_valid),             //         write_cp.valid
		.write_cp_data          (niosvprocessor_instruction_manager_agent_write_cp_data),              //                 .data
		.write_cp_startofpacket (niosvprocessor_instruction_manager_agent_write_cp_startofpacket),     //                 .startofpacket
		.write_cp_endofpacket   (niosvprocessor_instruction_manager_agent_write_cp_endofpacket),       //                 .endofpacket
		.write_cp_ready         (niosvprocessor_instruction_manager_agent_write_cp_ready),             //                 .ready
		.write_rp_valid         (niosvprocessor_instruction_manager_wr_limiter_rsp_src_valid),         //         write_rp.valid
		.write_rp_data          (niosvprocessor_instruction_manager_wr_limiter_rsp_src_data),          //                 .data
		.write_rp_channel       (niosvprocessor_instruction_manager_wr_limiter_rsp_src_channel),       //                 .channel
		.write_rp_startofpacket (niosvprocessor_instruction_manager_wr_limiter_rsp_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (niosvprocessor_instruction_manager_wr_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (niosvprocessor_instruction_manager_wr_limiter_rsp_src_ready),         //                 .ready
		.read_cp_valid          (niosvprocessor_instruction_manager_agent_read_cp_valid),              //          read_cp.valid
		.read_cp_data           (niosvprocessor_instruction_manager_agent_read_cp_data),               //                 .data
		.read_cp_startofpacket  (niosvprocessor_instruction_manager_agent_read_cp_startofpacket),      //                 .startofpacket
		.read_cp_endofpacket    (niosvprocessor_instruction_manager_agent_read_cp_endofpacket),        //                 .endofpacket
		.read_cp_ready          (niosvprocessor_instruction_manager_agent_read_cp_ready),              //                 .ready
		.read_rp_valid          (niosvprocessor_instruction_manager_rd_limiter_rsp_src_valid),         //          read_rp.valid
		.read_rp_data           (niosvprocessor_instruction_manager_rd_limiter_rsp_src_data),          //                 .data
		.read_rp_channel        (niosvprocessor_instruction_manager_rd_limiter_rsp_src_channel),       //                 .channel
		.read_rp_startofpacket  (niosvprocessor_instruction_manager_rd_limiter_rsp_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (niosvprocessor_instruction_manager_rd_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (niosvprocessor_instruction_manager_rd_limiter_rsp_src_ready),         //                 .ready
		.awid                   (niosvprocessor_instruction_manager_translator_m0_awid),               // altera_axi_slave.awid
		.awaddr                 (niosvprocessor_instruction_manager_translator_m0_awaddr),             //                 .awaddr
		.awlen                  (niosvprocessor_instruction_manager_translator_m0_awlen),              //                 .awlen
		.awsize                 (niosvprocessor_instruction_manager_translator_m0_awsize),             //                 .awsize
		.awburst                (niosvprocessor_instruction_manager_translator_m0_awburst),            //                 .awburst
		.awlock                 (niosvprocessor_instruction_manager_translator_m0_awlock),             //                 .awlock
		.awcache                (niosvprocessor_instruction_manager_translator_m0_awcache),            //                 .awcache
		.awprot                 (niosvprocessor_instruction_manager_translator_m0_awprot),             //                 .awprot
		.awuser                 (niosvprocessor_instruction_manager_translator_m0_awuser),             //                 .awuser
		.awqos                  (niosvprocessor_instruction_manager_translator_m0_awqos),              //                 .awqos
		.awregion               (niosvprocessor_instruction_manager_translator_m0_awregion),           //                 .awregion
		.awvalid                (niosvprocessor_instruction_manager_translator_m0_awvalid),            //                 .awvalid
		.awready                (niosvprocessor_instruction_manager_translator_m0_awready),            //                 .awready
		.wdata                  (niosvprocessor_instruction_manager_translator_m0_wdata),              //                 .wdata
		.wstrb                  (niosvprocessor_instruction_manager_translator_m0_wstrb),              //                 .wstrb
		.wlast                  (niosvprocessor_instruction_manager_translator_m0_wlast),              //                 .wlast
		.wvalid                 (niosvprocessor_instruction_manager_translator_m0_wvalid),             //                 .wvalid
		.wuser                  (niosvprocessor_instruction_manager_translator_m0_wuser),              //                 .wuser
		.wready                 (niosvprocessor_instruction_manager_translator_m0_wready),             //                 .wready
		.bid                    (niosvprocessor_instruction_manager_translator_m0_bid),                //                 .bid
		.bresp                  (niosvprocessor_instruction_manager_translator_m0_bresp),              //                 .bresp
		.buser                  (niosvprocessor_instruction_manager_translator_m0_buser),              //                 .buser
		.bvalid                 (niosvprocessor_instruction_manager_translator_m0_bvalid),             //                 .bvalid
		.bready                 (niosvprocessor_instruction_manager_translator_m0_bready),             //                 .bready
		.arid                   (niosvprocessor_instruction_manager_translator_m0_arid),               //                 .arid
		.araddr                 (niosvprocessor_instruction_manager_translator_m0_araddr),             //                 .araddr
		.arlen                  (niosvprocessor_instruction_manager_translator_m0_arlen),              //                 .arlen
		.arsize                 (niosvprocessor_instruction_manager_translator_m0_arsize),             //                 .arsize
		.arburst                (niosvprocessor_instruction_manager_translator_m0_arburst),            //                 .arburst
		.arlock                 (niosvprocessor_instruction_manager_translator_m0_arlock),             //                 .arlock
		.arcache                (niosvprocessor_instruction_manager_translator_m0_arcache),            //                 .arcache
		.arprot                 (niosvprocessor_instruction_manager_translator_m0_arprot),             //                 .arprot
		.aruser                 (niosvprocessor_instruction_manager_translator_m0_aruser),             //                 .aruser
		.arqos                  (niosvprocessor_instruction_manager_translator_m0_arqos),              //                 .arqos
		.arregion               (niosvprocessor_instruction_manager_translator_m0_arregion),           //                 .arregion
		.arvalid                (niosvprocessor_instruction_manager_translator_m0_arvalid),            //                 .arvalid
		.arready                (niosvprocessor_instruction_manager_translator_m0_arready),            //                 .arready
		.rid                    (niosvprocessor_instruction_manager_translator_m0_rid),                //                 .rid
		.rdata                  (niosvprocessor_instruction_manager_translator_m0_rdata),              //                 .rdata
		.rresp                  (niosvprocessor_instruction_manager_translator_m0_rresp),              //                 .rresp
		.rlast                  (niosvprocessor_instruction_manager_translator_m0_rlast),              //                 .rlast
		.rvalid                 (niosvprocessor_instruction_manager_translator_m0_rvalid),             //                 .rvalid
		.rready                 (niosvprocessor_instruction_manager_translator_m0_rready),             //                 .rready
		.ruser                  (niosvprocessor_instruction_manager_translator_m0_ruser),              //                 .ruser
		.wid                    (1'b0)                                                                 //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (niosvprocessor_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (jtag_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (niosvprocessor_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (jtag_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (niosvprocessor_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) niosvprocessor_dm_agent_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (niosvprocessor_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (niosvprocessor_dm_agent_agent_m0_address),                    //              m0.address
		.m0_burstcount           (niosvprocessor_dm_agent_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (niosvprocessor_dm_agent_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (niosvprocessor_dm_agent_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (niosvprocessor_dm_agent_agent_m0_lock),                       //                .lock
		.m0_readdata             (niosvprocessor_dm_agent_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (niosvprocessor_dm_agent_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (niosvprocessor_dm_agent_agent_m0_read),                       //                .read
		.m0_waitrequest          (niosvprocessor_dm_agent_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (niosvprocessor_dm_agent_agent_m0_writedata),                  //                .writedata
		.m0_write                (niosvprocessor_dm_agent_agent_m0_write),                      //                .write
		.rp_endofpacket          (niosvprocessor_dm_agent_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (niosvprocessor_dm_agent_agent_rp_ready),                      //                .ready
		.rp_valid                (niosvprocessor_dm_agent_agent_rp_valid),                      //                .valid
		.rp_data                 (niosvprocessor_dm_agent_agent_rp_data),                       //                .data
		.rp_startofpacket        (niosvprocessor_dm_agent_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (niosvprocessor_dm_agent_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (niosvprocessor_dm_agent_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (niosvprocessor_dm_agent_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (niosvprocessor_dm_agent_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (niosvprocessor_dm_agent_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (niosvprocessor_dm_agent_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (niosvprocessor_dm_agent_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (niosvprocessor_dm_agent_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (niosvprocessor_dm_agent_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (niosvprocessor_dm_agent_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (niosvprocessor_dm_agent_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (niosvprocessor_dm_agent_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (niosvprocessor_dm_agent_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (niosvprocessor_dm_agent_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (niosvprocessor_dm_agent_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (niosvprocessor_dm_agent_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (niosvprocessor_dm_agent_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (niosvprocessor_dm_agent_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (niosvprocessor_dm_agent_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) niosvprocessor_dm_agent_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (niosvprocessor_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (niosvprocessor_dm_agent_agent_rf_source_data),             //        in.data
		.in_valid          (niosvprocessor_dm_agent_agent_rf_source_valid),            //          .valid
		.in_ready          (niosvprocessor_dm_agent_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (niosvprocessor_dm_agent_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (niosvprocessor_dm_agent_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (niosvprocessor_dm_agent_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (niosvprocessor_dm_agent_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (niosvprocessor_dm_agent_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (niosvprocessor_dm_agent_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (niosvprocessor_dm_agent_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) niosvprocessor_dm_agent_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (niosvprocessor_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (niosvprocessor_dm_agent_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (niosvprocessor_dm_agent_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (niosvprocessor_dm_agent_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (niosvprocessor_dm_agent_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (niosvprocessor_dm_agent_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (niosvprocessor_dm_agent_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (niosvprocessor_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sram_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (sram_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (sram_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (sram_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (sram_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (sram_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (sram_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (sram_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (sram_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (sram_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (sram_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (sram_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (sram_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (sram_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (sram_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (sram_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (sram_s1_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (sram_s1_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (sram_s1_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (sram_s1_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (sram_s1_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (sram_s1_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (sram_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (sram_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (sram_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (sram_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (sram_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (sram_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (sram_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (sram_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (sram_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (sram_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sram_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (sram_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (sram_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (sram_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (sram_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (sram_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (sram_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (sram_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (sram_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (sram_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (sram_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_s1_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (sram_s1_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (sram_s1_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (sram_s1_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (sram_s1_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (sram_s1_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (120),
		.PKT_ORI_BURST_SIZE_L      (118),
		.PKT_RESPONSE_STATUS_H     (117),
		.PKT_RESPONSE_STATUS_L     (116),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (111),
		.PKT_PROTECTION_L          (109),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (121),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) niosvprocessor_timer_sw_agent_agent (
		.clk                     (clk_0_clk_clk),                                                     //             clk.clk
		.reset                   (niosvprocessor_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (niosvprocessor_timer_sw_agent_agent_m0_address),                    //              m0.address
		.m0_burstcount           (niosvprocessor_timer_sw_agent_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (niosvprocessor_timer_sw_agent_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (niosvprocessor_timer_sw_agent_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (niosvprocessor_timer_sw_agent_agent_m0_lock),                       //                .lock
		.m0_readdata             (niosvprocessor_timer_sw_agent_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (niosvprocessor_timer_sw_agent_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (niosvprocessor_timer_sw_agent_agent_m0_read),                       //                .read
		.m0_waitrequest          (niosvprocessor_timer_sw_agent_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (niosvprocessor_timer_sw_agent_agent_m0_writedata),                  //                .writedata
		.m0_write                (niosvprocessor_timer_sw_agent_agent_m0_write),                      //                .write
		.rp_endofpacket          (niosvprocessor_timer_sw_agent_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (niosvprocessor_timer_sw_agent_agent_rp_ready),                      //                .ready
		.rp_valid                (niosvprocessor_timer_sw_agent_agent_rp_valid),                      //                .valid
		.rp_data                 (niosvprocessor_timer_sw_agent_agent_rp_data),                       //                .data
		.rp_startofpacket        (niosvprocessor_timer_sw_agent_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (niosvprocessor_timer_sw_agent_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (niosvprocessor_timer_sw_agent_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (niosvprocessor_timer_sw_agent_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (niosvprocessor_timer_sw_agent_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (niosvprocessor_timer_sw_agent_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (niosvprocessor_timer_sw_agent_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (niosvprocessor_timer_sw_agent_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (niosvprocessor_timer_sw_agent_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (niosvprocessor_timer_sw_agent_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (niosvprocessor_timer_sw_agent_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (niosvprocessor_timer_sw_agent_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (niosvprocessor_timer_sw_agent_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (niosvprocessor_timer_sw_agent_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (niosvprocessor_timer_sw_agent_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (122),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) niosvprocessor_timer_sw_agent_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (niosvprocessor_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (niosvprocessor_timer_sw_agent_agent_rf_source_data),             //        in.data
		.in_valid          (niosvprocessor_timer_sw_agent_agent_rf_source_valid),            //          .valid
		.in_ready          (niosvprocessor_timer_sw_agent_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (niosvprocessor_timer_sw_agent_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (niosvprocessor_timer_sw_agent_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (niosvprocessor_timer_sw_agent_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) niosvprocessor_timer_sw_agent_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (niosvprocessor_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (niosvprocessor_timer_sw_agent_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (niosvprocessor_timer_sw_agent_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (niosvprocessor_timer_sw_agent_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (niosvprocessor_timer_sw_agent_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (niosvprocessor_timer_sw_agent_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (niosvprocessor_timer_sw_agent_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	niosvprocessor_mm_interconnect_0_router router (
		.sink_ready         (niosvprocessor_data_manager_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (niosvprocessor_data_manager_agent_write_cp_valid),         //          .valid
		.sink_data          (niosvprocessor_data_manager_agent_write_cp_data),          //          .data
		.sink_startofpacket (niosvprocessor_data_manager_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosvprocessor_data_manager_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_src_ready),                                         //       src.ready
		.src_valid          (router_src_valid),                                         //          .valid
		.src_data           (router_src_data),                                          //          .data
		.src_channel        (router_src_channel),                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_router router_001 (
		.sink_ready         (niosvprocessor_data_manager_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (niosvprocessor_data_manager_agent_read_cp_valid),         //          .valid
		.sink_data          (niosvprocessor_data_manager_agent_read_cp_data),          //          .data
		.sink_startofpacket (niosvprocessor_data_manager_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosvprocessor_data_manager_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                           //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_001_src_ready),                                    //       src.ready
		.src_valid          (router_001_src_valid),                                    //          .valid
		.src_data           (router_001_src_data),                                     //          .data
		.src_channel        (router_001_src_channel),                                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                               //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (niosvprocessor_instruction_manager_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (niosvprocessor_instruction_manager_agent_write_cp_valid),         //          .valid
		.sink_data          (niosvprocessor_instruction_manager_agent_write_cp_data),          //          .data
		.sink_startofpacket (niosvprocessor_instruction_manager_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosvprocessor_instruction_manager_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_002_src_ready),                                            //       src.ready
		.src_valid          (router_002_src_valid),                                            //          .valid
		.src_data           (router_002_src_data),                                             //          .data
		.src_channel        (router_002_src_channel),                                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                       //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (niosvprocessor_instruction_manager_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (niosvprocessor_instruction_manager_agent_read_cp_valid),         //          .valid
		.sink_data          (niosvprocessor_instruction_manager_agent_read_cp_data),          //          .data
		.sink_startofpacket (niosvprocessor_instruction_manager_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosvprocessor_instruction_manager_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_003_src_ready),                                           //       src.ready
		.src_valid          (router_003_src_valid),                                           //          .valid
		.src_data           (router_003_src_data),                                            //          .data
		.src_channel        (router_003_src_channel),                                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                      //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (jtag_avalon_jtag_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (jtag_avalon_jtag_slave_agent_rp_valid),            //          .valid
		.sink_data          (jtag_avalon_jtag_slave_agent_rp_data),             //          .data
		.sink_startofpacket (jtag_avalon_jtag_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (jtag_avalon_jtag_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                             //       src.ready
		.src_valid          (router_004_src_valid),                             //          .valid
		.src_data           (router_004_src_data),                              //          .data
		.src_channel        (router_004_src_channel),                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (niosvprocessor_dm_agent_agent_rp_ready),           //      sink.ready
		.sink_valid         (niosvprocessor_dm_agent_agent_rp_valid),           //          .valid
		.sink_data          (niosvprocessor_dm_agent_agent_rp_data),            //          .data
		.sink_startofpacket (niosvprocessor_dm_agent_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (niosvprocessor_dm_agent_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                             //       src.ready
		.src_valid          (router_005_src_valid),                             //          .valid
		.src_data           (router_005_src_data),                              //          .data
		.src_channel        (router_005_src_channel),                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                        //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (sram_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (sram_s1_agent_rp_valid),                           //          .valid
		.sink_data          (sram_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (sram_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (sram_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (niosvprocessor_timer_sw_agent_agent_rp_ready),         //      sink.ready
		.sink_valid         (niosvprocessor_timer_sw_agent_agent_rp_valid),         //          .valid
		.sink_data          (niosvprocessor_timer_sw_agent_agent_rp_data),          //          .data
		.sink_startofpacket (niosvprocessor_timer_sw_agent_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosvprocessor_timer_sw_agent_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_007_src_ready),                                 //       src.ready
		.src_valid          (router_007_src_valid),                                 //          .valid
		.src_data           (router_007_src_data),                                  //          .data
		.src_channel        (router_007_src_channel),                               //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                            //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) niosvprocessor_instruction_manager_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (niosvprocessor_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                                //          .valid
		.cmd_sink_data          (router_002_src_data),                                                 //          .data
		.cmd_sink_channel       (router_002_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (niosvprocessor_instruction_manager_wr_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (niosvprocessor_instruction_manager_wr_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (niosvprocessor_instruction_manager_wr_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (niosvprocessor_instruction_manager_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (niosvprocessor_instruction_manager_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (niosvprocessor_instruction_manager_wr_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (niosvprocessor_instruction_manager_wr_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (niosvprocessor_instruction_manager_wr_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (niosvprocessor_instruction_manager_wr_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (niosvprocessor_instruction_manager_wr_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (niosvprocessor_instruction_manager_wr_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (niosvprocessor_instruction_manager_wr_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (107),
		.PKT_DEST_ID_L             (106),
		.PKT_SRC_ID_H              (105),
		.PKT_SRC_ID_L              (104),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) niosvprocessor_instruction_manager_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (niosvprocessor_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                                //          .valid
		.cmd_sink_data          (router_003_src_data),                                                 //          .data
		.cmd_sink_channel       (router_003_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (niosvprocessor_instruction_manager_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (niosvprocessor_instruction_manager_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (niosvprocessor_instruction_manager_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (niosvprocessor_instruction_manager_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (niosvprocessor_instruction_manager_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (niosvprocessor_instruction_manager_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (niosvprocessor_instruction_manager_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (niosvprocessor_instruction_manager_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (niosvprocessor_instruction_manager_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (niosvprocessor_instruction_manager_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (niosvprocessor_instruction_manager_rd_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (niosvprocessor_instruction_manager_rd_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (niosvprocessor_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                          //          .ready
		.source0_valid         (jtag_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) niosvprocessor_dm_agent_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (niosvprocessor_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                       //          .ready
		.source0_valid         (niosvprocessor_dm_agent_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (niosvprocessor_dm_agent_burst_adapter_source0_data),          //          .data
		.source0_channel       (niosvprocessor_dm_agent_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (niosvprocessor_dm_agent_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (niosvprocessor_dm_agent_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (niosvprocessor_dm_agent_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sram_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                    //       cr0.clk
		.reset                 (niosvprocessor_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                             //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                            //          .ready
		.source0_valid         (sram_s1_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (sram_s1_burst_adapter_source0_data),               //          .data
		.source0_channel       (sram_s1_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (sram_s1_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (sram_s1_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (sram_s1_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (85),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (121),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) niosvprocessor_timer_sw_agent_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                     //       cr0.clk
		.reset                 (niosvprocessor_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                             //          .ready
		.source0_valid         (niosvprocessor_timer_sw_agent_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (niosvprocessor_timer_sw_agent_burst_adapter_source0_data),          //          .data
		.source0_channel       (niosvprocessor_timer_sw_agent_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (niosvprocessor_timer_sw_agent_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (niosvprocessor_timer_sw_agent_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (niosvprocessor_timer_sw_agent_burst_adapter_source0_ready)          //          .ready
	);

	niosvprocessor_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                 //      sink.ready
		.sink_channel       (router_src_channel),                               //          .channel
		.sink_data          (router_src_data),                                  //          .data
		.sink_startofpacket (router_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_src_valid),                                 //          .valid
		.src0_ready         (cmd_demux_src0_ready),                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                             //          .valid
		.src0_data          (cmd_demux_src0_data),                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                             //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                             //          .valid
		.src1_data          (cmd_demux_src1_data),                              //          .data
		.src1_channel       (cmd_demux_src1_channel),                           //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                             //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                             //          .valid
		.src2_data          (cmd_demux_src2_data),                              //          .data
		.src2_channel       (cmd_demux_src2_channel),                           //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                             //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                             //          .valid
		.src3_data          (cmd_demux_src3_data),                              //          .data
		.src3_channel       (cmd_demux_src3_channel),                           //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                        //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //      sink.ready
		.sink_channel       (router_001_src_channel),                           //          .channel
		.sink_data          (router_001_src_data),                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.src1_data          (cmd_demux_001_src1_data),                          //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                         //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                         //          .valid
		.src2_data          (cmd_demux_001_src2_data),                          //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                       //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                         //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                         //          .valid
		.src3_data          (cmd_demux_001_src3_data),                          //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                       //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset),                    //  clk_reset.reset
		.sink_ready         (niosvprocessor_instruction_manager_wr_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (niosvprocessor_instruction_manager_wr_limiter_cmd_src_channel),       //           .channel
		.sink_data          (niosvprocessor_instruction_manager_wr_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (niosvprocessor_instruction_manager_wr_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (niosvprocessor_instruction_manager_wr_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (niosvprocessor_instruction_manager_wr_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                                       //           .endofpacket
	);

	niosvprocessor_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset),                    //  clk_reset.reset
		.sink_ready         (niosvprocessor_instruction_manager_rd_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (niosvprocessor_instruction_manager_rd_limiter_cmd_src_channel),       //           .channel
		.sink_data          (niosvprocessor_instruction_manager_rd_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (niosvprocessor_instruction_manager_rd_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (niosvprocessor_instruction_manager_rd_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (niosvprocessor_instruction_manager_rd_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_003_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_003_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                                       //           .endofpacket
	);

	niosvprocessor_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                           //          .channel
		.sink0_data          (cmd_demux_src1_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                   //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                         //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                         //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                       //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                          //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                            //          .valid
		.src_data            (cmd_mux_002_src_data),                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                           //          .channel
		.sink0_data          (cmd_demux_src2_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket),                   //          .endofpacket
		.sink3_ready         (cmd_demux_003_src1_ready),                         //     sink3.ready
		.sink3_valid         (cmd_demux_003_src1_valid),                         //          .valid
		.sink3_channel       (cmd_demux_003_src1_channel),                       //          .channel
		.sink3_data          (cmd_demux_003_src1_data),                          //          .data
		.sink3_startofpacket (cmd_demux_003_src1_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src1_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_src1_data),                              //          .data
		.src1_channel       (rsp_demux_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                        //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_cmd_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_001_src1_data),                          //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_001_src2_data),                          //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (rsp_demux_001_src3_ready),                         //      src3.ready
		.src3_valid         (rsp_demux_001_src3_valid),                         //          .valid
		.src3_data          (rsp_demux_001_src3_data),                          //          .data
		.src3_channel       (rsp_demux_001_src3_channel),                       //          .channel
		.src3_startofpacket (rsp_demux_001_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (rsp_demux_001_src3_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_cmd_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_002_src1_data),                          //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_002_src2_data),                          //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (rsp_demux_002_src3_ready),                         //      src3.ready
		.src3_valid         (rsp_demux_002_src3_valid),                         //          .valid
		.src3_data          (rsp_demux_002_src3_data),                          //          .data
		.src3_channel       (rsp_demux_002_src3_channel),                       //          .channel
		.src3_startofpacket (rsp_demux_002_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (rsp_demux_002_src3_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                             //      sink.ready
		.sink_channel       (router_007_src_channel),                           //          .channel
		.sink_data          (router_007_src_data),                              //          .data
		.sink_startofpacket (router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_007_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_003_src1_data),                          //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                //          .valid
		.src_data            (rsp_mux_src_data),                                 //          .data
		.src_channel         (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                          //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                         //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                          //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //          .valid
		.src_data            (rsp_mux_001_src_data),                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                           //          .channel
		.sink0_data          (rsp_demux_src1_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                       //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                          //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                         //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                          //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                   //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                         //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                         //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                       //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                          //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                            //          .valid
		.src_data            (rsp_mux_002_src_data),                             //          .data
		.src_channel         (rsp_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_001_src2_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_001_src2_valid),                         //          .valid
		.sink0_channel       (rsp_demux_001_src2_channel),                       //          .channel
		.sink0_data          (rsp_demux_001_src2_data),                          //          .data
		.sink0_startofpacket (rsp_demux_001_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src2_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_002_src2_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_002_src2_valid),                         //          .valid
		.sink1_channel       (rsp_demux_002_src2_channel),                       //          .channel
		.sink1_data          (rsp_demux_002_src2_data),                          //          .data
		.sink1_startofpacket (rsp_demux_002_src2_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src2_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (niosvprocessor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                            //          .valid
		.src_data            (rsp_mux_003_src_data),                             //          .data
		.src_channel         (rsp_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_001_src3_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_001_src3_valid),                         //          .valid
		.sink0_channel       (rsp_demux_001_src3_channel),                       //          .channel
		.sink0_data          (rsp_demux_001_src3_data),                          //          .data
		.sink0_startofpacket (rsp_demux_001_src3_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src3_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_002_src3_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_002_src3_valid),                         //          .valid
		.sink1_channel       (rsp_demux_002_src3_channel),                       //          .channel
		.sink1_data          (rsp_demux_002_src3_data),                          //          .data
		.sink1_startofpacket (rsp_demux_002_src3_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src3_endofpacket)                    //          .endofpacket
	);

	niosvprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (niosvprocessor_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (jtag_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                      //         .error
	);

	niosvprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (niosvprocessor_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (niosvprocessor_dm_agent_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (niosvprocessor_dm_agent_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (niosvprocessor_dm_agent_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                   //         .error
	);

	niosvprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (niosvprocessor_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_s1_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (sram_s1_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (sram_s1_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                 //         .error
	);

	niosvprocessor_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (niosvprocessor_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (niosvprocessor_timer_sw_agent_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (niosvprocessor_timer_sw_agent_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (niosvprocessor_timer_sw_agent_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                         //         .error
	);

endmodule
